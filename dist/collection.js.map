{"version":3,"sources":["../collection.js"],"names":["define","Utils","SpriteSheet","SpriteObject","Camera","Collection","options","getSpriteFunction","forEach","getSprite","nop","bind","type","handleError","prototype","pos","size","Grid_forEach","isCollection","get","find","create","callback","optionsX","x","optionsY","y","optionsWidth","width","optionsHeight","height","gridCount","count","length","i","Math","floor","c","obj","destroyEverything","spriteFace","spriteInfo","index","cellSize","light","img","spritesheet","sprite","cubeFaces","spriteCube","cube","faces","push","quaternions","southQuaternionArray","createSpriteCollection","spriteHash","areaSize","spriteRegistry","spriteFunction","spriteCount","SpriteInfo","uid","enterArea","leaveArea","areaId","getAreaHashId","area","move","getAreaHashIdWithArea","abs","selectedObj","getCamPos","camera","getCamera","xPos","position","yPos","round","spriteCollection","camPos","xArea","yArea","areaRange","a","Array","isArray","array","onDestroy"],"mappings":"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","file":"collection.js","sourcesContent":["define([\n    'utils',\n    'spritesheet',\n    'spriteobject',\n    'camera',\n], function(Utils, SpriteSheet, SpriteObject, Camera) {\n\n    'use strict';\n\n    function Collection(options, getSpriteFunction, forEach) {\n        this.options = options || {};\n        this.getSprite = getSpriteFunction ? getSpriteFunction : Utils.nop;\n        if(forEach) {\n            this.forEach = forEach.bind(this);\n        } else {\n            switch(this.options.type) {\n                case \"grid\":\n                    break;\n                default:\n                    Utils.handleError('Collection type not recognized');\n                    break;\n            }\n        }\n    }\n    Collection.prototype.pos = null;\n    Collection.prototype.size = null;\n    Collection.prototype.getSprite = Utils.nop;\n    Collection.prototype.forEach = Grid_forEach;\n    Collection.prototype.options = null;\n    Collection.prototype.getSprite = Utils.nop;\n    Collection.prototype.isCollection = true;\n    Collection.prototype.get = Utils.nop;\n    Collection.prototype.find = Utils.nop;\n    Collection.prototype.create = Utils.nop;\n\n    /**\n     *  FUNCTION DEFINITIONS\n     */\n    function Grid_forEach(callback) {\n        const optionsX = this.options.x;\n        const optionsY = this.options.y;\n        const optionsWidth = this.options.width;\n        const optionsHeight = this.options.height;\n        const gridCount = optionsWidth*optionsHeight;\n        const count = this.options.count || 1;\n        const length = gridCount*count;\n\n        for(let i=0; i<length; i++) {\n            const x = optionsX + i%optionsWidth;\n            const y = optionsY + Math.floor(i/optionsWidth) % optionsHeight;\n            const c = Math.floor(i / gridCount);\n            const obj = this.getSprite(x,y,c);\n            if(obj) {\n                if(obj.forEach) {\n                    obj.forEach(callback);\n                } else {\n                    callback(obj);\n                }\n            }\n        }\n    }\n\n    function destroyEverything() {\n    }\n\n    function spriteFace(spriteInfo) {\n        const x = spriteInfo.x;\n        const y = spriteInfo.y;\n        const index = spriteInfo.index;\n        const size = cellSize;\n        const light = 1;\n        const img = SpriteSheet.spritesheet.sprite[index];\n\n        return SpriteObject.create(\n            x*cellSize,y*cellSize,size/2,\n            size,size,\n            null,\n            light,\n            img\n        );\n    }\n\n    const cubeFaces = [];\n    function spriteCube(spriteInfo) {\n        cubeFaces.length = 0;\n\n        cube.faces.push(\n            SpriteObject.create(\n                x*cellSize,y*cellSize,size/2,\n                size,size,\n                Camera.quaternions.southQuaternionArray,\n                light,\n                img\n            )\n        );\n\n\n        return cubeFaces;\n    }\n\n    function createSpriteCollection(options) {\n        const spriteHash = []; spriteHash.length = 1000000;\n        const areaSize = 50;\n        const spriteRegistry = [];\n        const cellSize = 64;\n\n        let spriteFunction = function(spriteInfo) {\n            switch(spriteInfo.type) {\n                case 'face':\n                    return spriteFace(spriteInfo);\n                    break;\n                case 'cube':\n                    return spriteCube(spriteInfo);\n                    break;\n            }\n        };\n        if(options.spriteFunction) {\n            spriteFunction = options.spriteFunction;\n        }\n\n        let spriteCount = 0;\n        function SpriteInfo(x,y,index) {\n            this.uid = ++spriteCount;\n            spriteRegistry[this.uid] = this;\n            this.index = index;\n            this.enterArea(x,y);\n        }\n        SpriteInfo.prototype.leaveArea = function() {\n            const areaId = getAreaHashId(this.x,this.y);\n            const area = spriteHash[areaId];\n            if(area) {\n                if(area[this.uid])\n                    delete area[this.uid];\n            }\n        };\n        SpriteInfo.prototype.enterArea = function(x,y) {\n            this.x = x; this.y = y;\n            const areaId = getAreaHashId(this.x,this.y);\n            const area = spriteHash[areaId] || (spriteHash[areaId] = {});\n            area[this.uid] = this;\n        };\n        SpriteInfo.prototype.move = function(x,y) {\n            this.leaveArea();\n            this.enterArea(x,y);\n        };\n\n        function getAreaHashIdWithArea(x,y) {\n            return Math.abs(x*1331 ^ 312 + y*131) % spriteHash.length;\n        }\n\n        function getAreaHashId(x,y) {\n            x = Math.floor(x/areaSize);\n            y = Math.floor(y/areaSize);\n            return getAreaHashIdWithArea(x,y);\n        }\n\n        const selectedObj = { x: 0, y: 0};\n        function getCamPos() {\n            const camera = Camera.getCamera();\n            const xPos = camera.position.x;\n            const yPos = camera.position.y;\n\n            selectedObj.x = Math.round(xPos/cellSize);\n            selectedObj.y = Math.round(yPos/cellSize) + 6;\n            return selectedObj;\n        }\n\n        const spriteCollection = new Collection(\n            options,\n            spriteFunction,\n            function(callback) {\n                const camPos = getCamPos();\n                const xArea = Math.floor(camPos.x / areaSize);\n                const yArea = Math.floor(camPos.y / areaSize);\n                const areaRange = 1;\n                for(let y=yArea-areaRange;y<=yArea+areaRange;y++) {\n                    for(let x=xArea-areaRange;x<=xArea+areaRange;x++) {\n                        const areaId = getAreaHashIdWithArea(x,y);\n                        const area = spriteHash[areaId];\n                        if(area) {\n                            for(let a in area) {\n                                const sprite = area[a];\n                                const obj = this.getSprite(sprite);\n                                if(Array.isArray(obj)) {\n                                    obj.forEach(callback);\n                                } else {\n                                    callback(obj);\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        );\n        spriteCollection.create = function(x,y,index) {\n            return new SpriteInfo(x,y,index);\n        };\n        \n        const array = [];\n        spriteCollection.get = function(x,y) {\n            const areaId = getAreaHashId(x,y);\n            const area = spriteHash[areaId];\n            array.length = 0;\n            for(let i in area) {\n                const sprite = area[i];\n                if(Math.floor(sprite.x)===x && Math.floor(sprite.y)===y) {\n                    array.push(sprite);\n                }\n            }\n            return array.length ? array : null;\n        };\n        spriteCollection.find = function(uid) {\n            return spriteRegistry[uid];\n        };\n        return spriteCollection;\n    }\n\n    /**\n     *  PUBLIC DECLARATIONS\n     */\n    Collection.createSpriteCollection = createSpriteCollection;\n\n    /**\n     *   PROCESSES\n     */\n    Utils.onDestroy(destroyEverything);\n\n\n    return Collection;\n});\n"]}