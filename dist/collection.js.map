{"version":3,"sources":["../collection.js"],"names":["define","Utils","SpriteSheet","SpriteObject","Camera","nop","Collection","options","getSpriteFunction","forEach","getSprite","bind","type","handleError","prototype","pos","size","Grid_forEach","isCollection","callback","optionsX","x","optionsY","y","optionsWidth","width","optionsHeight","height","gridCount","count","length","i","Math","floor","c","obj","destroyEverything","spriteFace","spriteInfo","index","cellSize","light","img","spritesheet","sprite","create","init","cubeFaces","spriteCube","cube","faces","push","quaternions","southQuaternionArray","createSpriteCollection","spriteMap","areaSize","spriteRegistry","spriteFunction","spriteCount","SpriteInfo","uid","enterArea","leaveArea","areaId","getAreaId","area","posId","move","selectedObj","getCamPos","camera","getCamera","xPos","position","yPos","round","spriteCollection","camPos","xArea","yArea","range","a","sprites","s","Array","isArray","get","find","onDestroy"],"mappings":"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","file":"collection.js","sourcesContent":["define([\n    'utils',\n    'spritesheet',\n    'spriteobject',\n    'camera',\n], function(Utils, SpriteSheet, SpriteObject, Camera) {\n\n    'use strict';\n\n    function nop() {\n    }\n\n    function Collection(options, getSpriteFunction, forEach) {\n        this.options = options || {};\n        this.getSprite = getSpriteFunction ? getSpriteFunction : nop;\n        if(forEach) {\n            this.forEach = forEach.bind(this);\n        } else {\n            switch(this.options.type) {\n                case \"grid\":\n                    break;\n                default:\n                    Utils.handleError('Collection type not recognized');\n                    break;\n            }\n        }\n    }\n    Collection.prototype.pos = null;\n    Collection.prototype.size = null;\n    Collection.prototype.getSprite = nop;\n    Collection.prototype.forEach = Grid_forEach;\n    Collection.prototype.options = null;\n    Collection.prototype.getSprite = nop;\n    Collection.prototype.isCollection = true;\n\n    /**\n     *  FUNCTION DEFINITIONS\n     */\n    function Grid_forEach(callback) {\n        const optionsX = this.options.x;\n        const optionsY = this.options.y;\n        const optionsWidth = this.options.width;\n        const optionsHeight = this.options.height;\n        const gridCount = optionsWidth*optionsHeight;\n        const count = this.options.count || 1;\n        const length = gridCount*count;\n\n        for(let i=0; i<length; i++) {\n            const x = optionsX + i%optionsWidth;\n            const y = optionsY + Math.floor(i/optionsWidth) % optionsHeight;\n            const c = Math.floor(i / gridCount);\n            const obj = this.getSprite(x,y,c);\n            if(obj) {\n                if(obj.forEach) {\n                    obj.forEach(callback);\n                } else {\n                    callback(obj);\n                }\n            }\n        }\n    }\n\n    function destroyEverything() {\n    }\n\n    function spriteFace(spriteInfo) {\n        const x = spriteInfo.x;\n        const y = spriteInfo.y;\n        const index = spriteInfo.index;\n        const size = cellSize;\n        const light = 1;\n        const img = SpriteSheet.spritesheet.sprite[index];\n\n        return SpriteObject.create().init(\n            x*cellSize,y*cellSize,size/2,\n            size,size,\n            null,\n            light,\n            img\n        );\n    }\n\n    const cubeFaces = [];\n    function spriteCube(spriteInfo) {\n        cubeFaces.length = 0;\n\n        cube.faces.push(\n            SpriteObject.create().init(\n                x*cellSize,y*cellSize,size/2,\n                size,size,\n                Camera.quaternions.southQuaternionArray,\n                light,\n                img\n            )\n        );\n\n\n        return cubeFaces;\n    }\n\n    function createSpriteCollection(options) {\n        const spriteMap = [];\n        const areaSize = 50;\n        const spriteRegistry = {};\n        const cellSize = 64;\n\n        let spriteFunction = function(spriteInfo) {\n            switch(spriteInfo.type) {\n                case 'face':\n                    return spriteFace(spriteInfo);\n                    break;\n                case 'cube':\n                    return spriteCube(spriteInfo);\n                    break;\n            }\n        };\n        if(options.spriteFunction) {\n            spriteFunction = options.spriteFunction;\n        }\n\n        let spriteCount = 0;\n        function SpriteInfo(x,y,index) {\n            this.uid = 'uid'+spriteCount++;\n            spriteRegistry[this.uid] = this;\n            this.index = index;\n            this.enterArea(x,y);\n        }\n        SpriteInfo.prototype.leaveArea = function() {\n            const areaId = getAreaId(this.x,this.y);\n            const area = spriteMap[areaId];\n            if(area) {\n                const posId = Math.floor(this.x) + \"_\" + Math.floor(this.y);\n                if(area[posId])\n                    delete area[posId][this.uid];\n            }\n        };\n        SpriteInfo.prototype.enterArea = function(x,y) {\n            this.x = x; this.y = y;\n            const areaId = getAreaId(this.x,this.y);\n            const area = spriteMap[areaId] || (spriteMap[areaId] = {});\n            const posId = Math.floor(this.x) + \"_\" + Math.floor(this.y);\n            area[posId] = area[posId] || (area[posId] = {});\n            area[posId][this.uid] = this;\n        };\n        SpriteInfo.prototype.move = function(x,y) {\n            this.leaveArea();\n            this.enterArea(x,y);\n        };\n\n\n        function getAreaId(x,y) {\n            x = Math.floor(x/areaSize);\n            y = Math.floor(y/areaSize);\n            return x+\"_\"+y;\n        }\n\n        const selectedObj = { x: 0, y: 0};\n        function getCamPos() {\n            const cellSize = 64;\n            const camera = Camera.getCamera();\n            const xPos = camera.position.x;\n            const yPos = camera.position.y;\n\n            selectedObj.x = Math.round(xPos/cellSize);\n            selectedObj.y = Math.round(yPos/cellSize) + 6;\n            return selectedObj;\n        }\n\n\n        const spriteCollection = new Collection(\n            options,\n            spriteFunction,\n            function(callback) {\n                const camPos = getCamPos();\n                const xArea = Math.floor(camPos.x / areaSize);\n                const yArea = Math.floor(camPos.y / areaSize);\n                const range = 1;\n                for(let y=yArea-range;y<=yArea+range;y++) {\n                    for(let x=xArea-range;x<=xArea+range;x++) {\n                        const area = spriteMap[x+\"_\"+y];\n                        if(area) {\n                            for(let a in area) {\n                                const sprites = area[a];\n                                for(let s in sprites) {\n                                    const obj = this.getSprite(sprites[s]);\n                                    if(Array.isArray(obj)) {\n                                        obj.forEach(callback);\n                                    } else {\n                                        callback(obj);\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        );\n        spriteCollection.create = function(x,y,index) {\n            return new SpriteInfo(x,y,index);\n        };\n\n        spriteCollection.get = function(x,y) {\n            const areaId = getAreaId(x,y);\n            const area = spriteMap[areaId];\n            const posId = Math.floor(x) + \"_\" + Math.floor(y);\n            return area?area[posId]:null;\n        };\n        spriteCollection.find = function(uid) {\n            return spriteRegistry[uid];\n        };\n        return spriteCollection;\n    }\n\n    /**\n     *  PUBLIC DECLARATIONS\n     */\n    Collection.createSpriteCollection = createSpriteCollection;\n\n    /**\n     *   PROCESSES\n     */\n    Utils.onDestroy(destroyEverything);\n\n\n    return Collection;\n});\n"]}