{"version":3,"sources":["../collection.js"],"names":["define","Utils","SpriteSheet","SpriteObject","Camera","nop","Collection","options","getSpriteFunction","forEach","getSprite","bind","type","Grid_forEach","handleError","prototype","pos","size","isCollection","callback","count","gridCount","width","height","length","i","x","y","Math","floor","c","obj","destroyEverything","spriteFace","spriteInfo","index","cellSize","light","img","spritesheet","sprite","create","init","cubeFaces","spriteCube","cube","faces","push","quaternions","southQuaternionArray","createSpriteCollection","spriteMap","areaSize","spriteRegistry","spriteFunction","spriteCount","SpriteInfo","uid","enterArea","leaveArea","areaId","getAreaId","area","posId","move","selectedObj","getCamPos","camera","getCamera","xPos","position","yPos","round","spriteCollection","camPos","xArea","yArea","range","a","sprites","s","Array","isArray","get","find","onDestroy"],"mappings":";;AAAAA,OAAO,CACH,OADG,EAEH,aAFG,EAGH,cAHG,EAIH,QAJG,CAAP,EAKG,UAASC,KAAT,EAAgBC,WAAhB,EAA6BC,YAA7B,EAA2CC,MAA3C,EAAmD;;AAElD;;AAEA,aAASC,GAAT,GAAe,CACd;;AAED,aAASC,UAAT,CAAoBC,OAApB,EAA6BC,iBAA7B,EAAgDC,OAAhD,EAAyD;AACrD,aAAKF,OAAL,GAAeA,WAAW,EAA1B;AACA,aAAKG,SAAL,GAAiBF,oBAAoBA,iBAApB,GAAwCH,GAAzD;AACA,YAAGI,OAAH,EAAY;AACR,iBAAKA,OAAL,GAAeA,QAAQE,IAAR,CAAa,IAAb,CAAf;AACH,SAFD,MAEO;AACH,oBAAO,KAAKJ,OAAL,CAAaK,IAApB;AACI,qBAAK,MAAL;AACI,yBAAKH,OAAL,GAAeI,aAAaF,IAAb,CAAkB,IAAlB,CAAf;AACA;AACJ;AACIV,0BAAMa,WAAN,CAAkB,gCAAlB;AACA;AANR;AAQH;AACJ;AACDR,eAAWS,SAAX,CAAqBC,GAArB,GAA2B,IAA3B;AACAV,eAAWS,SAAX,CAAqBE,IAArB,GAA4B,IAA5B;AACAX,eAAWS,SAAX,CAAqBL,SAArB,GAAiCL,GAAjC;AACAC,eAAWS,SAAX,CAAqBN,OAArB,GAA+BJ,GAA/B;AACAC,eAAWS,SAAX,CAAqBR,OAArB,GAA+B,IAA/B;AACAD,eAAWS,SAAX,CAAqBL,SAArB,GAAiCL,GAAjC;AACAC,eAAWS,SAAX,CAAqBG,YAArB,GAAoC,IAApC;;AAEA;;;AAGA,aAASL,YAAT,CAAsBM,QAAtB,EAAgC;AAC5B,YAAIC,QAAQ,KAAKb,OAAL,CAAaa,KAAb,IAAsB,CAAlC;AACA,YAAIC,YAAY,KAAKd,OAAL,CAAae,KAAb,GAAmB,KAAKf,OAAL,CAAagB,MAAhD;AACA,YAAIC,SAASH,YAAUD,KAAvB;AACA,aAAI,IAAIK,IAAE,CAAV,EAAaA,IAAED,MAAf,EAAuBC,GAAvB,EAA4B;AACxB,gBAAIC,IAAI,KAAKnB,OAAL,CAAamB,CAAb,GAAiBD,IAAE,KAAKlB,OAAL,CAAae,KAAxC;AACA,gBAAIK,IAAI,KAAKpB,OAAL,CAAaoB,CAAb,GAAiBC,KAAKC,KAAL,CAAWJ,IAAE,KAAKlB,OAAL,CAAae,KAA1B,IAAmC,KAAKf,OAAL,CAAagB,MAAzE;AACA,gBAAIO,IAAIF,KAAKC,KAAL,CAAWJ,IAAIJ,SAAf,CAAR;AACA,gBAAIU,MAAM,KAAKrB,SAAL,CAAegB,CAAf,EAAiBC,CAAjB,EAAmBG,CAAnB,CAAV;AACA,gBAAGC,GAAH,EAAQ;AACJ,oBAAGA,IAAItB,OAAP,EAAgB;AACZsB,wBAAItB,OAAJ,CAAYU,QAAZ;AACH,iBAFD,MAEO;AACHA,6BAASY,GAAT;AACH;AACJ;AACJ;AACJ;;AAED,aAASC,iBAAT,GAA6B,CAC5B;;AAED,aAASC,UAAT,CAAoBC,UAApB,EAAgC;AAC5B,YAAIR,IAAIQ,WAAWR,CAAnB;AACA,YAAIC,IAAIO,WAAWP,CAAnB;AACA,YAAIQ,QAAQD,WAAWC,KAAvB;AACA,YAAIlB,OAAOmB,QAAX;AACA,YAAIC,QAAQ,CAAZ;AACA,YAAIC,MAAMpC,YAAYqC,WAAZ,CAAwBC,MAAxB,CAA+BL,KAA/B,CAAV;;AAEA,eAAOhC,aAAasC,MAAb,GAAsBC,IAAtB,CACHhB,IAAEU,QADC,EACQT,IAAES,QADV,EACmBnB,OAAK,CADxB,EAEHA,IAFG,EAEEA,IAFF,EAGH,IAHG,EAIHoB,KAJG,EAKHC,GALG,CAAP;AAOH;;AAED,QAAIK,YAAY,EAAhB;AACA,aAASC,UAAT,CAAoBV,UAApB,EAAgC;AAC5BS,kBAAUnB,MAAV,GAAmB,CAAnB;;AAEAqB,aAAKC,KAAL,CAAWC,IAAX,CACI5C,aAAasC,MAAb,GAAsBC,IAAtB,CACIhB,IAAEU,QADN,EACeT,IAAES,QADjB,EAC0BnB,OAAK,CAD/B,EAEIA,IAFJ,EAESA,IAFT,EAGIb,OAAO4C,WAAP,CAAmBC,oBAHvB,EAIIZ,KAJJ,EAKIC,GALJ,CADJ;;AAWA,eAAOK,SAAP;AACH;;AAED,aAASO,sBAAT,CAAgC3C,OAAhC,EAAyC;AACrC,YAAI4C,YAAY,EAAhB;AACA,YAAIC,WAAW,EAAf;AACA,YAAIC,iBAAiB,EAArB;AACA,YAAIjB,WAAW,EAAf;;AAEA,YAAIkB,iBAAiB,wBAASpB,UAAT,EAAqB;AACtC,oBAAOA,WAAWtB,IAAlB;AACI,qBAAK,MAAL;AACI,2BAAOqB,WAAWC,UAAX,CAAP;AACA;AACJ,qBAAK,MAAL;AACI,2BAAOU,WAAWV,UAAX,CAAP;AACA;AANR;AAQH,SATD;AAUA,YAAG3B,QAAQ+C,cAAX,EAA2B;AACvBA,6BAAiB/C,QAAQ+C,cAAzB;AACH;;AAED,YAAIC,cAAc,CAAlB;AACA,iBAASC,UAAT,CAAoB9B,CAApB,EAAsBC,CAAtB,EAAwBQ,KAAxB,EAA+B;AAC3B,iBAAKsB,GAAL,GAAW,QAAMF,aAAjB;AACAF,2BAAe,KAAKI,GAApB,IAA2B,IAA3B;AACA,iBAAKtB,KAAL,GAAaA,KAAb;AACA,iBAAKuB,SAAL,CAAehC,CAAf,EAAiBC,CAAjB;AACH;AACD6B,mBAAWzC,SAAX,CAAqB4C,SAArB,GAAiC,YAAW;AACxC,gBAAIC,SAASC,UAAU,KAAKnC,CAAf,EAAiB,KAAKC,CAAtB,CAAb;AACA,gBAAImC,OAAOX,UAAUS,MAAV,CAAX;AACA,gBAAGE,IAAH,EAAS;AACL,oBAAIC,QAAQnC,KAAKC,KAAL,CAAW,KAAKH,CAAhB,IAAqB,GAArB,GAA2BE,KAAKC,KAAL,CAAW,KAAKF,CAAhB,CAAvC;AACA,oBAAGmC,KAAKC,KAAL,CAAH,EACI,OAAOD,KAAKC,KAAL,EAAY,KAAKN,GAAjB,CAAP;AACP;AACJ,SARD;AASAD,mBAAWzC,SAAX,CAAqB2C,SAArB,GAAiC,UAAShC,CAAT,EAAWC,CAAX,EAAc;AAC3C,iBAAKD,CAAL,GAASA,CAAT,CAAY,KAAKC,CAAL,GAASA,CAAT;AACZ,gBAAIiC,SAASC,UAAU,KAAKnC,CAAf,EAAiB,KAAKC,CAAtB,CAAb;AACA,gBAAImC,OAAOX,UAAUS,MAAV,MAAsBT,UAAUS,MAAV,IAAoB,EAA1C,CAAX;AACA,gBAAIG,QAAQnC,KAAKC,KAAL,CAAW,KAAKH,CAAhB,IAAqB,GAArB,GAA2BE,KAAKC,KAAL,CAAW,KAAKF,CAAhB,CAAvC;AACAmC,iBAAKC,KAAL,IAAcD,KAAKC,KAAL,MAAgBD,KAAKC,KAAL,IAAc,EAA9B,CAAd;AACAD,iBAAKC,KAAL,EAAY,KAAKN,GAAjB,IAAwB,IAAxB;AACH,SAPD;AAQAD,mBAAWzC,SAAX,CAAqBiD,IAArB,GAA4B,UAAStC,CAAT,EAAWC,CAAX,EAAc;AACtC,iBAAKgC,SAAL;AACA,iBAAKD,SAAL,CAAehC,CAAf,EAAiBC,CAAjB;AACH,SAHD;;AAMA,iBAASkC,SAAT,CAAmBnC,CAAnB,EAAqBC,CAArB,EAAwB;AACpBD,gBAAIE,KAAKC,KAAL,CAAWH,IAAE0B,QAAb,CAAJ;AACAzB,gBAAIC,KAAKC,KAAL,CAAWF,IAAEyB,QAAb,CAAJ;AACA,mBAAO1B,IAAE,GAAF,GAAMC,CAAb;AACH;;AAED,YAAIsC,cAAc,EAAEvC,GAAG,CAAL,EAAQC,GAAG,CAAX,EAAlB;AACA,iBAASuC,SAAT,GAAqB;AACjB,gBAAI9B,WAAW,EAAf;AACA,gBAAI+B,SAAS/D,OAAOgE,SAAP,EAAb;AACA,gBAAIC,OAAOF,OAAOG,QAAP,CAAgB5C,CAA3B;AACA,gBAAI6C,OAAOJ,OAAOG,QAAP,CAAgB3C,CAA3B;;AAEAsC,wBAAYvC,CAAZ,GAAgBE,KAAK4C,KAAL,CAAWH,OAAKjC,QAAhB,CAAhB;AACA6B,wBAAYtC,CAAZ,GAAgBC,KAAK4C,KAAL,CAAWD,OAAKnC,QAAhB,IAA4B,CAA5C;AACA,mBAAO6B,WAAP;AACH;;AAGD,YAAIQ,mBAAmB,IAAInE,UAAJ,CACnBC,OADmB,EAEnB+C,cAFmB,EAGnB,UAASnC,QAAT,EAAmB;AACf,gBAAIuD,SAASR,WAAb;AACA,gBAAIS,QAAQ/C,KAAKC,KAAL,CAAW6C,OAAOhD,CAAP,GAAW0B,QAAtB,CAAZ;AACA,gBAAIwB,QAAQhD,KAAKC,KAAL,CAAW6C,OAAO/C,CAAP,GAAWyB,QAAtB,CAAZ;AACA,gBAAIyB,QAAQ,CAAZ;AACA,iBAAI,IAAIlD,IAAEiD,QAAMC,KAAhB,EAAsBlD,KAAGiD,QAAMC,KAA/B,EAAqClD,GAArC,EAA0C;AACtC,qBAAI,IAAID,IAAEiD,QAAME,KAAhB,EAAsBnD,KAAGiD,QAAME,KAA/B,EAAqCnD,GAArC,EAA0C;AACtC,wBAAIoC,OAAOX,UAAUzB,IAAE,GAAF,GAAMC,CAAhB,CAAX;AACA,wBAAGmC,IAAH,EAAS;AACL,6BAAI,IAAIgB,CAAR,IAAahB,IAAb,EAAmB;AACf,gCAAIiB,UAAUjB,KAAKgB,CAAL,CAAd;AACA,iCAAI,IAAIE,CAAR,IAAaD,OAAb,EAAsB;AAClB,oCAAIhD,MAAM,KAAKrB,SAAL,CAAeqE,QAAQC,CAAR,CAAf,CAAV;AACA,oCAAGC,MAAMC,OAAN,CAAcnD,GAAd,CAAH,EAAuB;AACnBA,wCAAItB,OAAJ,CAAYU,QAAZ;AACH,iCAFD,MAEO;AACHA,6CAASY,GAAT;AACH;AACJ;AACJ;AACJ;AACJ;AACJ;AACJ,SA1BkB,CAAvB;AA4BA0C,yBAAiBhC,MAAjB,GAA0B,UAASf,CAAT,EAAWC,CAAX,EAAaQ,KAAb,EAAoB;AAC1C,mBAAO,IAAIqB,UAAJ,CAAe9B,CAAf,EAAiBC,CAAjB,EAAmBQ,KAAnB,CAAP;AACH,SAFD;;AAIAsC,yBAAiBU,GAAjB,GAAuB,UAASzD,CAAT,EAAWC,CAAX,EAAc;AACjC,gBAAIiC,SAASC,UAAUnC,CAAV,EAAYC,CAAZ,CAAb;AACA,gBAAImC,OAAOX,UAAUS,MAAV,CAAX;AACA,gBAAIG,QAAQnC,KAAKC,KAAL,CAAWH,CAAX,IAAgB,GAAhB,GAAsBE,KAAKC,KAAL,CAAWF,CAAX,CAAlC;AACA,mBAAOmC,OAAKA,KAAKC,KAAL,CAAL,GAAiB,IAAxB;AACH,SALD;AAMAU,yBAAiBW,IAAjB,GAAwB,UAAS3B,GAAT,EAAc;AAClC,mBAAOJ,eAAeI,GAAf,CAAP;AACH,SAFD;AAGA,eAAOgB,gBAAP;AACH;;AAED;;;AAGAnE,eAAW4C,sBAAX,GAAoCA,sBAApC;;AAEA;;;AAGAjD,UAAMoF,SAAN,CAAgBrD,iBAAhB;;AAGA,WAAO1B,UAAP;AACH,CA7ND","file":"collection.js","sourcesContent":["define([\n    'utils',\n    'spritesheet',\n    'spriteobject',\n    'camera',\n], function(Utils, SpriteSheet, SpriteObject, Camera) {\n\n    'use strict';\n\n    function nop() {\n    }\n\n    function Collection(options, getSpriteFunction, forEach) {\n        this.options = options || {};\n        this.getSprite = getSpriteFunction ? getSpriteFunction : nop;\n        if(forEach) {\n            this.forEach = forEach.bind(this);\n        } else {\n            switch(this.options.type) {\n                case \"grid\":\n                    this.forEach = Grid_forEach.bind(this);\n                    break;\n                default:\n                    Utils.handleError('Collection type not recognized');\n                    break;\n            }\n        }\n    }\n    Collection.prototype.pos = null;\n    Collection.prototype.size = null;\n    Collection.prototype.getSprite = nop;\n    Collection.prototype.forEach = nop;\n    Collection.prototype.options = null;\n    Collection.prototype.getSprite = nop;\n    Collection.prototype.isCollection = true;\n\n    /**\n     *  FUNCTION DEFINITIONS\n     */\n    function Grid_forEach(callback) {\n        var count = this.options.count || 1;\n        var gridCount = this.options.width*this.options.height;\n        var length = gridCount*count;\n        for(var i=0; i<length; i++) {\n            var x = this.options.x + i%this.options.width;\n            var y = this.options.y + Math.floor(i/this.options.width) % this.options.height;\n            var c = Math.floor(i / gridCount);\n            var obj = this.getSprite(x,y,c);\n            if(obj) {\n                if(obj.forEach) {\n                    obj.forEach(callback);\n                } else {\n                    callback(obj);\n                }\n            }\n        }\n    }\n\n    function destroyEverything() {\n    }\n\n    function spriteFace(spriteInfo) {\n        var x = spriteInfo.x;\n        var y = spriteInfo.y;\n        var index = spriteInfo.index;\n        var size = cellSize;\n        var light = 1;\n        var img = SpriteSheet.spritesheet.sprite[index];\n\n        return SpriteObject.create().init(\n            x*cellSize,y*cellSize,size/2,\n            size,size,\n            null,\n            light,\n            img\n        );\n    }\n\n    var cubeFaces = [];\n    function spriteCube(spriteInfo) {\n        cubeFaces.length = 0;\n\n        cube.faces.push(\n            SpriteObject.create().init(\n                x*cellSize,y*cellSize,size/2,\n                size,size,\n                Camera.quaternions.southQuaternionArray,\n                light,\n                img\n            )\n        );\n\n\n        return cubeFaces;\n    }\n\n    function createSpriteCollection(options) {\n        var spriteMap = [];\n        var areaSize = 50;\n        var spriteRegistry = {};\n        var cellSize = 64;\n\n        var spriteFunction = function(spriteInfo) {\n            switch(spriteInfo.type) {\n                case 'face':\n                    return spriteFace(spriteInfo);\n                    break;\n                case 'cube':\n                    return spriteCube(spriteInfo);\n                    break;\n            }\n        };\n        if(options.spriteFunction) {\n            spriteFunction = options.spriteFunction;\n        }\n\n        var spriteCount = 0;\n        function SpriteInfo(x,y,index) {\n            this.uid = 'uid'+spriteCount++;\n            spriteRegistry[this.uid] = this;\n            this.index = index;\n            this.enterArea(x,y);\n        }\n        SpriteInfo.prototype.leaveArea = function() {\n            var areaId = getAreaId(this.x,this.y);\n            var area = spriteMap[areaId];\n            if(area) {\n                var posId = Math.floor(this.x) + \"_\" + Math.floor(this.y);\n                if(area[posId])\n                    delete area[posId][this.uid];\n            }\n        };\n        SpriteInfo.prototype.enterArea = function(x,y) {\n            this.x = x; this.y = y;\n            var areaId = getAreaId(this.x,this.y);\n            var area = spriteMap[areaId] || (spriteMap[areaId] = {});\n            var posId = Math.floor(this.x) + \"_\" + Math.floor(this.y);\n            area[posId] = area[posId] || (area[posId] = {});\n            area[posId][this.uid] = this;\n        };\n        SpriteInfo.prototype.move = function(x,y) {\n            this.leaveArea();\n            this.enterArea(x,y);\n        };\n\n\n        function getAreaId(x,y) {\n            x = Math.floor(x/areaSize);\n            y = Math.floor(y/areaSize);\n            return x+\"_\"+y;\n        }\n\n        var selectedObj = { x: 0, y: 0};\n        function getCamPos() {\n            var cellSize = 64;\n            var camera = Camera.getCamera();\n            var xPos = camera.position.x;\n            var yPos = camera.position.y;\n\n            selectedObj.x = Math.round(xPos/cellSize);\n            selectedObj.y = Math.round(yPos/cellSize) + 6;\n            return selectedObj;\n        }\n\n\n        var spriteCollection = new Collection(\n            options,\n            spriteFunction,\n            function(callback) {\n                var camPos = getCamPos();\n                var xArea = Math.floor(camPos.x / areaSize);\n                var yArea = Math.floor(camPos.y / areaSize);\n                var range = 1;\n                for(var y=yArea-range;y<=yArea+range;y++) {\n                    for(var x=xArea-range;x<=xArea+range;x++) {\n                        var area = spriteMap[x+\"_\"+y];\n                        if(area) {\n                            for(var a in area) {\n                                var sprites = area[a];\n                                for(var s in sprites) {\n                                    var obj = this.getSprite(sprites[s]);\n                                    if(Array.isArray(obj)) {\n                                        obj.forEach(callback);\n                                    } else {\n                                        callback(obj);\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        );\n        spriteCollection.create = function(x,y,index) {\n            return new SpriteInfo(x,y,index);\n        };\n\n        spriteCollection.get = function(x,y) {\n            var areaId = getAreaId(x,y);\n            var area = spriteMap[areaId];\n            var posId = Math.floor(x) + \"_\" + Math.floor(y);\n            return area?area[posId]:null;\n        };\n        spriteCollection.find = function(uid) {\n            return spriteRegistry[uid];\n        }\n        return spriteCollection;\n    }\n\n    /**\n     *  PUBLIC DECLARATIONS\n     */\n    Collection.createSpriteCollection = createSpriteCollection;\n\n    /**\n     *   PROCESSES\n     */\n    Utils.onDestroy(destroyEverything);\n\n\n    return Collection;\n});\n"]}