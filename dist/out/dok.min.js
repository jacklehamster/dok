"use strict";

var _typeof2 = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var _typeof = "function" == typeof Symbol && "symbol" == _typeof2(Symbol.iterator) ? function (t) {
  return typeof t === "undefined" ? "undefined" : _typeof2(t);
} : function (t) {
  return t && "function" == typeof Symbol && t.constructor === Symbol && t !== Symbol.prototype ? "symbol" : typeof t === "undefined" ? "undefined" : _typeof2(t);
};define("utils", [], function () {
  function t() {
    var t = /\/$|index\.html$|next\.html$/g;t.exec(location.pathname) || window.history.pushState(null, "", location.pathname + "/" + location.search + location.hash);
  }function e(t, e) {
    "undefined" == typeof e && (e = "scene.html"), m.destroyEverything(), location.replace("../" + t + "/" + e);
  }function r(t, e) {
    if (Array.isArray(t)) {
      for (var r = [], n = 0; n < t.length; n++) {
        r.push(t[n]), r.push("\n ");
      }console.error.apply(null, r);
    } else console.error(t);if (m.lastError = t, !e) throw new Error("Last error terminated the process.");
  }function n(t, e) {
    return function () {
      t && t(), e && e();
    };
  }function i(t) {
    a("object" === ("undefined" == typeof t ? "undefined" : _typeof(t)), "Pass 'arguments' to expectParams");for (var e = 1; e < arguments.length; e++) {
      var r = null === t[e - 1] ? "null" : Array.isArray(t[e - 1]) ? "array" : _typeof(t[e - 1]);a(arguments[e].split("|").indexOf(r) >= 0, ["Expected argument " + (e - 1) + " to be " + arguments[e] + " NOT " + r, t]);
    }
  }function o(t) {
    a("object" === ("undefined" == typeof t ? "undefined" : _typeof(t)), "Pass 'arguments' to expectParams");for (var e = 1; e < arguments.length; e++) {
      var r = null === t[e - 1] ? "null" : Array.isArray(t[e - 1]) ? "array" : _typeof(t[e - 1]);if (arguments[e].split("|").indexOf(r) < 0) return !1;
    }return !0;
  }function a(t, e) {
    t || r(e ? e : "Assert failed: condition not met.");
  }function s() {
    m.destroyEverything();
  }function u() {
    document.onbeforeunload = window.onbeforeunload = s;
  }function l(t) {
    v = m.combineMethods(t, v);
  }function h() {
    "undefined" == typeof String.prototype.trim && (String.prototype.trim = function () {
      return String(this).replace(/^\s+|\s+$/g, "");
    }), window.requestAnimationFrame || c(), "undefined" == typeof Float32Array.prototype.fill && (Float32Array.prototype.fill = f), "undefined" == typeof Uint32Array.prototype.fill && (Uint32Array.prototype.fill = f), Array.prototype.getFrame = function (t) {
      return t |= 0, this[t % this.length];
    }, Number.prototype.getFrame = function () {
      return this;
    };
  }function f(t, e, r) {
    e = e || 0, r = r || this.length;for (var n = e; n < r; n++) {
      this[n] = t;
    }return this;
  }function c() {
    function t(t) {
      r = setTimeout(e, 1e3 / 60, t);
    }function e(t) {
      clearTimeout(r);var e = Date.now() - n;t(e), n = Date.now();
    }window.requestAnimationFrame = function () {
      return window.webkitRequestAnimationFrame || window.mozRequestAnimationFrame || window.oRequestAnimationFrame || window.msRequestAnimationFrame || t;
    }();var r,
        n = 0;
  }function d(t, e, r, n, i, o, a) {
    g(t, function (t) {
      e[r] = t;for (var i = 0; i < e.length; i++) {
        if (void 0 === e[i]) return;
      }n.apply(null, e);
    }, i, o, a);
  }function g(t, e, n, i, o) {
    if (Array.isArray(t)) for (var a = new Array(t.length), s = 0; s < t.length; s++) {
      d(t[s], a, s, e);
    } else {
      var u = new XMLHttpRequest();u.overrideMimeType(n ? "text/plain; charset=x-user-defined" : "text/plain; charset=UTF-8"), u.open(i ? i : "GET", t, !0), u.addEventListener("load", function (t) {
        4 === u.readyState && (200 === u.status ? e(u.responseText) : r(u.responseText));
      }), u.addEventListener("error", function (t) {
        r(t);
      }), u.send(o);
    }
  }function p() {
    this.x = 0, this.y = 0, this.left = -1, this.right = 1, this.top = -1, this.bottom = 1, this.direction = 0;var t = [0, 0];this.reset = function () {
      this.x = 0, this.y = 0, this.left = -1, this.right = 1, this.top = -1, this.bottom = 1, this.direction = 0;
    }, this.current = function () {
      return t[0] = this.x, t[1] = this.y, t;
    }, this.next = function () {
      var t = this.current();switch (this.direction) {case 0:
          this.x++, this.x >= this.right && (this.right++, this.direction = (this.direction + 1) % 4);break;case 1:
          this.y++, this.y >= this.bottom && (this.bottom++, this.direction = (this.direction + 1) % 4);break;case 2:
          this.x--, this.x <= this.left && (this.left--, this.direction = (this.direction + 1) % 4);break;case 3:
          this.y--, this.y <= this.top && (this.top--, this.direction = (this.direction + 1) % 4);}return t;
    };
  }function y() {
    return x;
  }function m() {
    this.lastError = null;
  }var v = function v() {},
      x = "";return m.handleError = r, m.changeScene = e, m.destroyEverything = v, m.combineMethods = n, m.expectParams = i, m.checkParams = o, m.assert = a, m.fixPath = t, m.onDestroy = l, m.loadAsync = g, m.Roundabout = p, m.getTitle = y, u(), h(), m;
}), define("loop", ["utils"], function (t) {
  "use strict";
  function e(t) {
    if (a) {
      if (requestAnimationFrame(e), t <= o.time + u) return;o.time = Math.floor(t / u) * u;for (var r = 0; a && r < a.length; r++) {
        a[r]();
      }h++, t - l > 1e3 && (s = h, h = 0, l = t);
    }
  }function r(t) {
    null === a && (a = [], i()), a.push(t);
  }function n(t) {
    if (a) {
      var e = a.indexOf(t);a.splice(e, 1), 0 === a.length && (a = null);
    }
  }function i() {
    e(0);
  }function o() {}var a = null,
      s = 0,
      u = Math.floor(1e3 / 60),
      l = 0,
      h = 0;return o.addLoop = r, o.removeLoop = n, t.onDestroy(o), Object.defineProperty(o, "fps", { enumerable: !1, configurable: !1, get: function get() {
      return s;
    }, set: function set(t) {
      u = Math.floor(1e3 / t);
    } }), o.time = 0, o;
}), define("gifworker", ["utils", "loop"], function (t, e) {
  function r() {
    function t(t, e, r) {
      var n = t.img,
          i = t.gce,
          o = i.transparencyGiven ? i.transparencyIndex : null,
          a = i.disposalMethod,
          s = n.lctFlag ? n.lct : r.gct;n.pixels.forEach(function (t, r) {
        o !== t ? (e.data[4 * r] = s[t][0], e.data[4 * r + 1] = s[t][1], e.data[4 * r + 2] = s[t][2], e.data[4 * r + 3] = 255) : 2 !== a && 3 !== a || (e.data[4 * r + 3] = 0);
      });
    }onmessage = function onmessage(e) {
      var r = e.data.frameInfo,
          n = e.data.cData,
          i = e.data.header,
          o = e.data.id;r && n && i && t(r, n, i), postMessage({ id: o, cData: n, frameInfo: r }, [n.data.buffer]);
    };
  }function n(t) {
    t.onmessage = function (t) {
      a[t.data.id](t.data.cData, t.data.frameInfo), delete a[t.data.id];
    };
  }function i(t, r, n, i) {
    require(["https://cdnjs.cloudflare.com/ajax/libs/blueimp-md5/2.7.0/js/md5.min.js"], function (o) {
      var s = o(Math.random() + "" + e.time);a[s] = i, l.postMessage({ frameInfo: t, cData: r, header: n, id: s }, [r.data.buffer]);
    });
  }function o() {
    l && l.terminate(), l = null, a = null;
  }var a = {},
      s = r.toString();s = s.substring(s.indexOf("{") + 1, s.lastIndexOf("}"));var u = new Blob([s], { type: "application/javascript" }),
      l = new Worker(URL.createObjectURL(u));return n(l), l.send = i, t.onDestroy(o), l;
}), define("gifHandler", ["utils", "loop", "gifworker"], function (t, e, r) {
  "use strict";
  function n(t) {
    return u[t] && u[t].block || ".gif" === t.split("?")[0].slice(-4).toLowerCase() || 0 === t.indexOf("data:image/gif;");
  }function i(t) {
    return u[t] || (u[t] = o(t)), u[t];
  }function o(n) {
    var i = 0,
        o = 0,
        a = 0,
        s = { framesProcessed: 0, header: null, frameInfos: [], block: null, canvases: [], callbacks: [], processNextFrame: function processNextFrame() {
        var t = this.framesProcessed,
            e = this.frameInfos[t];if (e && e.gce && e.img && this.header) {
          var n = document.createElement("canvas");n.style.position = "absolute", n.style.left = 0, n.style.top = 0, n.width = this.header.width, n.height = this.header.height;var i = n.getContext("2d");i.webkitImageSmoothingEnabled = !1, i.imageSmoothingEnabled = !1, i.msImageSmoothingEnabled = !1, this.canvases[t] = n, t > 0 && i.drawImage(this.canvases[t - 1], 0, 0);var s = i.getImageData(0, 0, n.width, n.height),
              u = this,
              l = this.processNextFrame.bind(this);r.send(e, s, this.header, function (t, e) {
            i.putImageData(t, 0, 0), u.callbacks[e.frame] && u.callbacks[e.frame](), a = e.frame, u.frameInfos[e.frame].ready = !0, l();
          }), o = this.framesProcessed, this.framesProcessed++;
        }
      }, hdr: function hdr(t) {
        this.header = t;
      }, gce: function gce(t) {
        (0 == this.frameInfos.length || this.frameInfos[this.frameInfos.length - 1].gce) && this.frameInfos.push({ gce: null, cycleTime: null, img: null, frame: this.frameInfos.length, ready: !1 });var e = this.frameInfos.length - 1;this.frameInfos[e].gce = t, t.delayTime || (t.delayTime = 1), this.frameInfos[e].cycleTime = 10 * t.delayTime + (0 === e ? 0 : this.frameInfos[e - 1].cycleTime), this.processNextFrame();
      }, img: function img(t) {
        (0 === this.frameInfos.length || this.frameInfos[this.frameInfos.length - 1].img) && this.frameInfos.push({}), this.frameInfos[this.frameInfos.length - 1].img = t, this.processNextFrame();
      }, getFrame: function getFrame() {
        if (this.block && e.time > i) {
          o = (o + 1) % this.frameInfos.length;var t = this.frameInfos[this.frameInfos.length - 1].cycleTime;i = Math.floor(e.time / t) * t + this.frameInfos[o].cycleTime;
        }return Math.min(o, a);
      }, eof: function eof(t) {
        this.block = t, this.processNextFrame();
      } };return t.loadAsync(n, function (t) {
      require(["https://jacklehamster.github.io/jsgif/gif.js"], function () {
        parseGIF(new Stream(t), s);
      });
    }, !0), s;
  }function a() {
    u = {};
  }function s() {}var u = {};return s.getGif = i, s.isGif = n, t.onDestroy(a), s;
}), define("camera", ["threejs", "loop"], function (t, e) {
  "use strict";
  function r() {
    return p;
  }function n(t) {
    t && p !== m ? (p = m, u(y, p)) : t || p !== m || (p = y, u(m, p)), i();
  }function i() {
    p.quaternion.toArray(v.array), v.forwardMovement.set(0, 0, 1), v.forwardMovement.applyQuaternion(p.quaternion);
  }function o() {
    return p.quaternion.equals(x) || (i(), x.copy(p.quaternion)), v;
  }function a() {
    y.position.set(0, 0, 400), m.position.set(0, 0, 400);
  }function s() {
    return p === m;
  }function u(t, e) {
    e.position.copy(t.position), e.quaternion.copy(t.quaternion);
  }function l() {
    return { is3d: s(), position: p.position.toArray(), quaternion: p.quaternion.toArray() };
  }function h(t) {
    n(t.is3d), p.quaternion.fromArray(t.quaternion), p.position.fromArray(t.position), p.updateProjectionMatrix();
  }function f(t, e) {
    var r = -Math.atan2(e - p.position.z, t - p.position.x) - Math.PI / 2;return b.setFromAxisAngle(A, r), b.multiply(I), b.toArray(w);
  }function c() {
    var e = {};return e.groundQuaternionArray = new t.Quaternion().setFromAxisAngle(new t.Vector3(1, 0, 0), -Math.PI / 2).toArray(new Float32Array(4)), e.southQuaternionArray = new t.Quaternion().toArray(new Float32Array(4)), e.northQuaternionArray = new t.Quaternion().setFromAxisAngle(new t.Vector3(0, 1, 0), -Math.PI).toArray(new Float32Array(4)), e.westQuaternionArray = new t.Quaternion().setFromAxisAngle(new t.Vector3(0, 1, 0), -Math.PI / 2).toArray(new Float32Array(4)), e.eastQuaternionArray = new t.Quaternion().setFromAxisAngle(new t.Vector3(0, 1, 0), Math.PI / 2).toArray(new Float32Array(4)), e.ceilingQuaternionArray = new t.Quaternion().setFromAxisAngle(new t.Vector3(1, 0, 0), Math.PI / 2).toArray(new Float32Array(4)), e;
  }function d() {
    var t = innerWidth,
        e = innerHeight;y.left = -t / 2, y.right = t / 2, y.top = e / 2, y.bottom = -e / 2, y.updateProjectionMatrix(), m.aspect = t / e, m.updateProjectionMatrix();
  }function g() {}var p,
      y = new t.OrthographicCamera(-innerWidth / 2, innerWidth / 2, innerHeight / 2, -innerHeight / 2, .1, 1e6),
      m = new t.PerspectiveCamera(75, innerWidth / innerHeight, .1, 1e6),
      v = { array: new Float32Array(4), forwardMovement: new t.Vector3(0, 0, 1), version: 0 },
      x = new t.Quaternion(),
      b = new t.Quaternion(),
      w = new Float32Array(4),
      A = new t.Vector3(0, 1, 0),
      I = new t.Quaternion().setFromAxisAngle(new t.Vector3(1, 0, 0), -Math.PI / 2);return g.setCamera3d = n, g.isCamera3d = s, g.getCamera = r, g.setCameraPosition = h, g.getCameraPosition = l, g.getCameraQuaternionData = o, g.shadowQuatArray = f, g.quaternions = c(), a(), n(!0), e.addLoop(d), g;
}), define("objectpool", ["utils"], function (t) {
  function e(t) {
    this.pool = [], this.classObject = t;
  }function r() {
    return this.index >= this.pool.length && this.pool.push(new this.classObject()), this.pool[this.index++];
  }function n() {
    this.index = 0;
  }function i(t) {
    return t.pool || (t.pool = new e(t)), t.pool.create();
  }function o(t) {
    t.pool && t.pool.recycleAll();
  }return e.prototype.classObject = null, e.prototype.pool = null, e.prototype.index = 0, e.prototype.create = r, e.prototype.recycleAll = n, e.create = i, e.recycleAll = o, e;
}), define("spriteobject", ["threejs", "objectpool"], function (t, e) {
  "use strict";
  function r() {
    this.position = new t.Vector3(), this.size = new Float32Array([0, 0, 1]), this.quaternionArray = new Float32Array(4).fill(0);
  }return r.prototype.init = function (t, e, r, n, i, o, a, s) {
    return this.position.set(t, e, r), this.size[0] = n, this.size[1] = i, this.hasQuaternionArray = null !== o, o && this.quaternionArray.set(o), this.light = a, this.img = s, this;
  }, r.prototype.position = null, r.prototype.size = null, r.prototype.hasQuaternionArray = !1, r.prototype.quaternionArray = null, r.prototype.light = 1, r.prototype.img = -1, r.prototype.offset = null, r.create = function (t, n, i, o, a, s, u, l) {
    return e.create(r).init(t, n, i, o, a, s, u, l);
  }, r;
}), define("packer", ["utils"], function (t) {
  "use strict";
  function e(t, e, r, n, i) {
    if (e + n > u || r + i > u) return !1;if (h[t]) for (var o = 0; o < n; o++) {
      if (h[t][e + o]) for (var a = 0; a < i; a++) {
        if (h[t][e + o][r + a]) return !1;
      }
    }return !0;
  }function r(t) {
    if (t.width <= 1 && t.height <= 1) return null;if (t.width > u || t.height > u) return null;for (var r = Math.ceil(t.width / l), n = Math.ceil(t.height / l), i = 0; i < s; i++) {
      for (var o = 0; o < u / l - r; o++) {
        for (var a = 0; a < u / l - n; a++) {
          if (e(i, o, a, r, n)) return { tex: i, x: o * l, y: a * l };
        }
      }
    }return null;
  }function n(t, e, r, n) {
    h[t] || (h[t] = []);for (var i = Math.ceil((n.width + 1) / l), o = Math.ceil((n.height + 1) / l), a = 0; a < i; a++) {
      h[t][e / l + a] || (h[t][e / l + a] = []);for (var s = 0; s < o; s++) {
        h[t][e / l + a][r / l + s] = n;
      }
    }
  }function i(t) {
    var e = r(t);return e && n(e.tex, e.x, e.y, t), e;
  }function o() {
    h.length = 0;
  }function a() {}var s = 16,
      u = 2048,
      l = 8,
      h = [];return a.getSlot = i, t.onDestroy(o), a;
}), define("gifhandler", ["utils", "loop", "gifworker"], function (t, e, r) {
  "use strict";
  function n(t) {
    return u[t] && u[t].block || ".gif" === t.split("?")[0].slice(-4).toLowerCase() || 0 === t.indexOf("data:image/gif;");
  }function i(t) {
    return u[t] || (u[t] = o(t)), u[t];
  }function o(n) {
    var i = 0,
        o = 0,
        a = 0,
        s = { framesProcessed: 0, header: null, frameInfos: [], block: null, canvases: [], callbacks: [], processNextFrame: function processNextFrame() {
        var t = this.framesProcessed,
            e = this.frameInfos[t];if (e && e.gce && e.img && this.header) {
          var n = document.createElement("canvas");n.style.position = "absolute", n.style.left = 0, n.style.top = 0, n.width = this.header.width, n.height = this.header.height;var i = n.getContext("2d");i.webkitImageSmoothingEnabled = !1, i.imageSmoothingEnabled = !1, i.msImageSmoothingEnabled = !1, this.canvases[t] = n, t > 0 && i.drawImage(this.canvases[t - 1], 0, 0);var s = i.getImageData(0, 0, n.width, n.height),
              u = this,
              l = this.processNextFrame.bind(this);r.send(e, s, this.header, function (t, e) {
            i.putImageData(t, 0, 0), u.callbacks[e.frame] && u.callbacks[e.frame](), a = e.frame, u.frameInfos[e.frame].ready = !0, l();
          }), o = this.framesProcessed, this.framesProcessed++;
        }
      }, hdr: function hdr(t) {
        this.header = t;
      }, gce: function gce(t) {
        (0 == this.frameInfos.length || this.frameInfos[this.frameInfos.length - 1].gce) && this.frameInfos.push({ gce: null, cycleTime: null, img: null, frame: this.frameInfos.length, ready: !1 });var e = this.frameInfos.length - 1;this.frameInfos[e].gce = t, t.delayTime || (t.delayTime = 1), this.frameInfos[e].cycleTime = 10 * t.delayTime + (0 === e ? 0 : this.frameInfos[e - 1].cycleTime), this.processNextFrame();
      }, img: function img(t) {
        (0 === this.frameInfos.length || this.frameInfos[this.frameInfos.length - 1].img) && this.frameInfos.push({}), this.frameInfos[this.frameInfos.length - 1].img = t, this.processNextFrame();
      }, getFrame: function getFrame() {
        if (this.block && e.time > i) {
          o = (o + 1) % this.frameInfos.length;var t = this.frameInfos[this.frameInfos.length - 1].cycleTime;i = Math.floor(e.time / t) * t + this.frameInfos[o].cycleTime;
        }return Math.min(o, a);
      }, eof: function eof(t) {
        this.block = t, this.processNextFrame();
      } };return t.loadAsync(n, function (t) {
      require(["https://jacklehamster.github.io/jsgif/gif.js"], function () {
        parseGIF(new Stream(t), s);
      });
    }, !0), s;
  }function a() {
    u = {};
  }function s() {}var u = {};return s.getGif = i, s.isGif = n, t.onDestroy(a), s;
}), define("loader", ["utils", "loop"], function (t, e) {
  "use strict";
  function r(t) {
    m = t, document.body.removeChild(u());
  }function n(t, e) {
    var r = new Image();return r.onload = function (t) {
      e.call(r, t), g--, v++, o();
    }, r.crossOrigin = "", c.push({ image: r, url: t }), x++, o(), r;
  }function i(e, r) {
    x++, t.loadAsync(e, function (t) {
      v++, r(t);
    });
  }function o() {
    for (; f < c.length && g < d;) {
      c[f].image.src = c[f].url, f++, g++;
    }f === c.length && (f = 0, c.length = 0, v = 0, x = 0);
  }function a() {
    return x ? v / x : 1;
  }function s() {
    if (p) {
      var t = p.getContext("2d"),
          r = a();y = Math.max(0, y + (r - y) / 10), r >= 1 && (y = 1, e.removeLoop(s)), t.fillRect(10, 10, (p.width - 20) * y, p.height - 20), r >= 1 && m && setTimeout(m, 100);
    }
  }function u() {
    if (!p) {
      p = document.createElement("canvas"), p.id = "loading", p.width = Math.round(2 * innerWidth * 2 / 3), p.height = 50, p.style.left = innerWidth / 2 - p.width / 4 + "px", p.style.top = innerHeight / 2 - p.height / 4 + "px", p.style.width = p.width / 2 + "px", p.style.height = p.height / 2 + "px", p.style.position = "absolute", p.style.backgroundColor = "white", p.style.border = "10px double #00DDDD";var t = p.getContext("2d");t.fillStyle = "#0066aa", e.addLoop(s);
    }return document.body.appendChild(p), p;
  }function l() {
    c.length = 0;
  }function h() {}var f = 0,
      c = [],
      d = 3,
      g = 0,
      p = null,
      y = 0,
      m = null,
      v = 0,
      x = 0;return h.loadImage = n, h.loadFile = i, h.getLoadingProgress = a, h.getLoadingBar = u, h.setOnLoad = r, t.onDestroy(l), h;
}), define("spritesheet", ["threejs", "utils", "gifhandler", "loader", "packer"], function (t, e, r, n, i) {
  "use strict";
  function o(e, r) {
    if (!x[e] && r) {
      var n = x[e] = document.createElement("canvas");if (n.setAttribute("url", e), 0 === e.indexOf("tex-")) {
        n.width = n.height = F;var i = parseInt(e.split("-").pop()),
            o = new t.Texture(n);o.magFilter = t.NearestFilter, o.minFilter = t.LinearMipMapLinearFilter, n.addEventListener("update", p), I[i] = o, n.setAttribute("texture", i.toString()), n.style.position = "absolute", n.style.left = 0, n.style.top = 0;
      } else n.width = n.height = 1;a(n);
    }return x[e];
  }function a(t) {
    var e = t.getContext("2d");e.webkitImageSmoothingEnabled = !1, e.imageSmoothingEnabled = !1, e.msImageSmoothingEnabled = !1;
  }function s(t, e) {
    var r = document.createEvent("CustomEvent");return r.initCustomEvent(t, !1, !1, e || {}), r;
  }function u(t, e) {
    var i = o(e + ":" + t.join("|"));if (i) return i;if (t.length > 1) {
      i = o(e + ":" + t.join("|"), !0);var f = t.slice(0, t.length - 1),
          c = t[t.length - 1],
          d = u(f, e);return i.setAttribute("base-url", d.getAttribute("base-url")), h(d, c, i), d.addEventListener("update", function (t) {
        var e = t.currentTarget;h(e, c, i), i.dispatchEvent(s("update"));
      }), i;
    }var g = t[0];i = o(e + ":" + g, !0);var p = g.split("x");if (2 !== p.length || isNaN(parseInt(p[0])) || isNaN(parseInt(p[1]))) {
      if (r.isGif(g)) {
        var y = r.getGif(g);i.setAttribute("animated", !0), i.setAttribute("base-url", g), y.frameInfos[e] && y.frameInfos[e].ready ? l(y, e, i) : y.callbacks[e] = l.bind(null, y, e, i);
      } else {
        i.setAttribute("base-url", g);var m = n.loadImage(g, function () {
          i.width = m.naturalWidth, i.height = m.naturalHeight, a(i), i.getContext("2d").drawImage(m, 0, 0), i.dispatchEvent(s("update"));
        });
      }
    } else i.width = parseInt(p[0]), i.height = parseInt(p[1]);return i;
  }function l(t, e, r) {
    r.width = t.header.width, r.height = t.header.height, a(r), r.getContext("2d").drawImage(t.canvases[e], 0, 0), r.dispatchEvent(s("update"));
  }function h(t, e, r) {
    var n = r.getContext("2d"),
        i = e.split(",");if (4 === i.length && i.every(function (t) {
      return !isNaN(t);
    })) {
      i = i.map(function (t) {
        return parseInt(t);
      });var o = Math.min(t.width - i[0], i[2]),
          s = Math.min(t.height - i[1], i[3]);o > 0 && s > 0 && (r.width = o, r.height = s, a(r), n.drawImage(t, i[0], i[1], o, s, 0, 0, o, s));
    } else if (0 === e.indexOf("scale:")) {
      if (t.width > 1 && t.height > 1) {
        var u = e.split(":")[1].split(",");if (r.width = Math.ceil(t.width * Math.abs(u[0])), r.height = Math.ceil(t.height * Math.abs(u[1 % u.length])), a(r), u[0] < 0 || u[1 % u.length] < 0) {
          var l = [u[0] < 0 ? -1 : 1, u[1 % u.length] < 0 ? -1 : 1];n.translate(l[0] < 0 ? r.width : 0, l[1] < 0 ? r.height : 0), n.scale(l[0], l[1]);
        }n.drawImage(t, 0, 0, t.width, t.height, 0, 0, r.width, r.height), n.restore();
      }
    } else if (0 === e.indexOf("border")) {
      r.width = t.width, r.height = t.height, a(r);var h = e.split(":")[1] || 1;h.indexOf("%") > 0 && (h = Math.round(parseFloat(h.split("%")[0]) / 100 * Math.min(r.width, r.height))), n.drawImage(t, 0, 0), n.beginPath();for (var f = 0; f < h; f++) {
        n.rect(f, f, t.width - 1 - 2 * f, t.height - 1 - 2 * f);
      }n.stroke();
    } else if (0 === e.indexOf("text:")) r.width = t.width, r.height = t.height, a(r), n.fillStyle = "#000000", n.font = "18px Comic", n.fillText(e.split("text:")[1], 0, t.height);else if (0 === e.indexOf("shadow")) {
      r.width = t.width, r.height = t.height, a(r);for (var c = t.getContext("2d"), d = c.getImageData(0, 0, t.width, t.height), f = 0; f < d.data.length; f += 4) {
        0 !== d.data[f + 3] && (d.data[f] = 0, d.data[f + 1] = 0, d.data[f + 2] = 0, d.data[f + 3] = 127);
      }n.putImageData(d, 0, 0);
    } else 0 === e.indexOf("cross") && (r.width = t.width, r.height = t.height, a(r), n.drawImage(t, 0, 0), n.beginPath(), n.moveTo(t.width / 2, 0), n.lineTo(t.width / 2, t.height), n.moveTo(0, t.height / 2), n.lineTo(t.width, t.height / 2), n.stroke());
  }function f(t) {
    var e = w[t],
        n = e && e.animated ? r.getGif(e.url).getFrame() : 0;return e && e.cut[n] && e.cut[n].ready ? e.cut[n] : e && e.url ? (e = c(e.url, n), e.cut[n]) : null;
  }function c(t, e) {
    if (b[t] && b[t].cut[e] && b[t].cut[e].ready) return b[t];var r = u(t.split("|"), e),
        n = i.getSlot(r),
        o = b[t];if (o || (o = { index: A++, url: t, baseUrl: null, cut: [], animated: !1 }, b[t] = o, w[o.index] = o), o.cut[e] || (o.cut[e] = { tex: 0, uv: null, ready: !1, url: t, baseUrl: null }), n) {
      q[r.getAttribute("url")] = n, r.addEventListener("update", g), r.dispatchEvent(s("update"));var a = n.x / F,
          l = n.y / F,
          h = r.width / F,
          f = r.height / F,
          c = D.attributes.uv.array,
          d = [a, 1 - l - f, a + h, 1 - l];o.animated = "true" === r.getAttribute("animated"), o.cut[e].baseUrl = o.baseUrl = r.getAttribute("base-url"), o.cut[e].tex = n.tex, o.cut[e].uv = new Float32Array(c.length);for (var p = 0; p < c.length; p++) {
        o.cut[e].uv[p] = d[2 * c[p] + p % 2];
      }return o.cut[e].ready = !0, o;
    }return o;
  }function d(t, e) {
    if (void 0 === e && (e = v.spritesheet), "string" != typeof t) {
      for (var r in t) {
        if (t.hasOwnProperty(r)) {
          e[r] || (e[r] = []);var n = v.preLoad(t[r], e[r]);null !== n && (e[r] = n);
        }
      }return console.log(e), e;
    }var i = c(t, 0);if (i) return i.index;
  }function g(t) {
    var e = t.currentTarget,
        r = e.getAttribute("url"),
        n = q[r],
        i = o("tex-" + n.tex, !0);i.getContext("2d").drawImage(e, n.x, n.y), i.dispatchEvent(s("update"));
  }function p(t) {
    var e = t.currentTarget;I[parseInt(e.getAttribute("texture"))].needsUpdate = !0;
  }function y() {
    I.forEach(function (t) {
      t && t.dispose();
    }), x = {}, b = {}, q = {}, I = [null];
  }function m() {
    return I;
  }function v() {}var x = {},
      b = {},
      w = [],
      A = 0,
      I = [null],
      q = {},
      F = 2048,
      D = new t.PlaneBufferGeometry(1, 1);return v.getCut = f, v.getTextures = m, v.preLoad = d, v.fetchCanvas = u, v.spritesheet = {}, e.onDestroy(y), v;
}), define("turbosort", [], function () {
  function t(t) {
    l || (l = new Uint32Array(t + 1), h = new Uint32Array(t + 1));
  }function e(t, r, n) {
    for (var i = f(t[r]), o = i, a = i, s = i, u = !0, l = 1; l < n; l++) {
      var h = f(t[r + l]);s > h ? (u = !1, h < o && (o = h)) : h > a && (a = h), s = h;
    }return e.result.min = o, e.result.max = a, e.result.inOrder = u, e.result;
  }function r(t) {
    return t;
  }function n(t, e, n) {
    t && (e = e ? Math.min(e, t.length) : t.length, e > 1 && (f = n ? n : r, o(t, 0, e ? e : t.length)));
  }function i(t, e) {
    return f(t) - f(e);
  }function o(t, r, n) {
    if (n < 500) return void s(t, r, r + n - 1, i);var u = e(t, r, n);if (!u.inOrder) {
      var d = u.min,
          g = u.max,
          p = g - d;if (0 !== p) {
        var y, m;for (h.fill(0), h[c] = 1, y = 0; y < n; y++) {
          m = Math.floor((c - 1) * (f(t[y + r]) - d) / p), h[m]++;
        }for (l.fill(0), l[c] = n, l[0] = r, y = 1; y < c; y++) {
          l[y] = l[y - 1] + h[y - 1];
        }for (var v = r, x = 0; x < c;) {
          m = Math.floor((c - 1) * (f(t[v]) - d) / p);var b = l[m] + --h[m];for (a(t, v, b); !h[x];) {
            x++;
          }v = l[x];
        }for (y = 0; y < c; y++) {
          h[y] = l[y + 1] - l[y];
        }for (y = 0; y < c; y++) {
          h[y] > 1 && o(t, l[y], h[y]);
        }
      }
    }
  }function a(t, e, r) {
    if (e !== r) {
      var n = t[e];t[e] = t[r], t[r] = n;
    }
  }function s(t, e, r, n) {
    var i, o;t.length;return e < r && (i = r, o = u(t, i, e, r, n), s(t, e, o - 1, n), s(t, o + 1, r, n)), t;
  }function u(t, e, r, n, i) {
    for (var o = t[e], s = r, u = r; u < n; u++) {
      i(t[u], o) < 0 && (a(t, u, s), s++);
    }return a(t, n, s), s;
  }var l,
      h,
      f,
      c = 1e3;return e.result = { min: 0, max: 0, inOrder: !1 }, t(c), n;
}), define("shaders/fragment-shader.glsl", [], function () {
  return "\n    \nuniform sampler2D texture[ 16 ];\nvarying vec2 vUv;\nvarying float vTex;\nvarying float vLight;\n\nvoid main() {\n    vec2 uv = vUv;\n\n    int iTex = int(vTex);\n\n    if(iTex==0) {\n        gl_FragColor = texture2D( texture[0],  uv);\n    } else if(iTex==1) {\n        gl_FragColor = texture2D( texture[1],  uv);\n    } else if(iTex==2) {\n        gl_FragColor = texture2D( texture[2],  uv);\n    } else if(iTex==3) {\n        gl_FragColor = texture2D( texture[3],  uv);\n    } else if(iTex==4) {\n        gl_FragColor = texture2D( texture[4],  uv);\n    } else if(iTex==5) {\n        gl_FragColor = texture2D( texture[5],  uv);\n    } else if(iTex==6) {\n        gl_FragColor = texture2D( texture[6],  uv);\n    } else if(iTex==7) {\n        gl_FragColor = texture2D( texture[7],  uv);\n    } else if(iTex==8) {\n        gl_FragColor = texture2D( texture[8],  uv);\n    } else if(iTex==9) {\n        gl_FragColor = texture2D( texture[9],  uv);\n    } else if(iTex==10) {\n        gl_FragColor = texture2D( texture[10],  uv);\n    } else if(iTex==11) {\n        gl_FragColor = texture2D( texture[11],  uv);\n    } else if(iTex==12) {\n        gl_FragColor = texture2D( texture[12],  uv);\n    } else if(iTex==13) {\n        gl_FragColor = texture2D( texture[13],  uv);\n    } else if(iTex==14) {\n        gl_FragColor = texture2D( texture[14],  uv);\n    } else if(iTex==15) {\n        gl_FragColor = texture2D( texture[15],  uv);\n    }\n\n    gl_FragColor.x *= vLight;\n    gl_FragColor.y *= vLight;\n    gl_FragColor.z *= vLight;\n//        gl_FragColor.w *= vLight;\n//    gl_FragColor.w = .5;\n}\n\n    ";
}), define("shaders/vertex-shader.glsl", [], function () {
  return "\n    \nvarying vec2 vUv;\nattribute float tex;\nattribute float light;\nattribute vec3 spot;\nattribute vec4 quaternion;\nvarying float vTex;\nvarying float vLight;\nuniform vec3 vCam;\nuniform float curvature;\n\nvoid main()  {\n    vTex = tex;\n    vUv = uv;\n\n    vec3 newPosition = rotateVectorByQuaternion( position - spot, quaternion ) + spot;\n    vLight = 1.0/ sqrt(500.0 / distance(newPosition, vCam)) * light;\n\n    float dist = distance(newPosition, vCam);\n    newPosition.z = newPosition.z - curvature * (dist*dist)/20000.0;\n\n    vec4 mvPosition = modelViewMatrix * vec4(newPosition, 1.0 );\n    gl_Position = projectionMatrix * mvPosition;\n}    \n\n    ";
}), define("shaders/vertex-shader-common.glsl", [], function () {
  return "\n\nvec3 rotateVectorByQuaternion( in vec3 v, in vec4 q ) {\n\n    vec3 dest = vec3( 0.0 );\n\n    float x = v.x, y  = v.y, z  = v.z;\n    float qx = q.x, qy = q.y, qz = q.z, qw = q.w;\n\n    // calculate quaternion * vector\n\n    float ix =  qw * x + qy * z - qz * y,\n          iy =  qw * y + qz * x - qx * z,\n          iz =  qw * z + qx * y - qy * x,\n          iw = -qx * x - qy * y - qz * z;\n\n    // calculate result * inverse quaternion\n\n    dest.x = ix * qw + iw * -qx + iy * -qz - iz * -qy;\n    dest.y = iy * qw + iw * -qy + iz * -qx - ix * -qz;\n    dest.z = iz * qw + iw * -qz + ix * -qy - iy * -qx;\n\n    return dest;\n\n}\n\nvec4 axisAngleToQuaternion( in vec3 axis, in float angle ) {\n\n    vec4 dest = vec4( 0.0 );\n\n    float halfAngle = angle / 2.0,\n          s = sin( halfAngle );\n\n    dest.x = axis.x * s;\n    dest.y = axis.y * s;\n    dest.z = axis.z * s;\n    dest.w = cos( halfAngle );\n\n    return dest;\n\n}    \n    \n    ";
}), define("shader", ["shaders/fragment-shader.glsl", "shaders/vertex-shader.glsl", "shaders/vertex-shader-common.glsl"], function (t, e, r) {
  return { fragmentShader: t, vertexShader: r + e };
}), define("spriterenderer", ["threejs", "utils", "spriteobject", "spritesheet", "objectpool", "camera", "turbosort", "shader"], function (t, e, r, n, i, o, a, s) {
  "use strict";
  function u() {
    this.images = [], this.imageOrder = [], this.imageCount = 0, this.mesh = f(this), this.curvature = 0;var t = this;this.display = function (e) {
      var r = null,
          i = e && e.visible !== !1 ? n.getCut(e.img) : null;if (i && i.ready) {
        var a = t.imageCount;t.images[a] || (t.images[a] = new l(), t.images[a].index = a), r = t.images[a];for (var s = 0; s < w.length; s++) {
          r.indexArray[s] = w[s] + 4 * r.index;
        }var u = e.hasQuaternionArray ? e.quaternionArray : o.getCameraQuaternionData().array;if (r.quaternionArray[0] === u[0] && r.quaternionArray[1] === u[1] && r.quaternionArray[2] === u[2] && r.quaternionArray[3] === u[3] || (r.quaternionArray.set(u), r.quaternionArray.set(u, 4), r.quaternionArray.set(u, 8), r.quaternionArray.set(u, 12), r.quatDirty = !0), e.position.equals(r.position) || (r.position.copy(e.position), r.position.toArray(r.spotArray), r.position.toArray(r.spotArray, 3), r.position.toArray(r.spotArray, 6), r.position.toArray(r.spotArray, 9), r.positionDirty = !0), e.size[0] !== r.size[0] || e.size[1] !== r.size[1] || e.size[2] !== r.size[2] || r.positionDirty) {
          r.size[0] = e.size[0], r.size[1] = e.size[1], r.size[2] = e.size[2];for (var h = x.attributes.position.array, f = 0; f < h.length; f++) {
            r.vertices[f] = h[f] * e.size[f % 3] + r.spotArray[f];
          }r.verticesDirty = !0;
        }r.uv !== i.uv && (r.uv = i.uv, r.uvDirty = !0), r.tex !== i.tex && (r.tex = i.tex, r.texDirty = !0), r.light !== e.light && (r.light = e.light, r.lightDirty = !0), r.spriteObject = e, t.imageOrder[a] = r, t.imageCount++;
      }return r;
    }, A.push(this);
  }function l() {
    this.position = new t.Vector3(), this.spotArray = new Float32Array(3 * b), this.size = new Float32Array(3), this.vertices = new Float32Array(x.attributes.position.array.length), this.quaternionArray = new Float32Array(4 * b), this.indexArray = new Uint16Array(w.length);
  }function h() {
    this.imageCount = 0, i.recycleAll(r);
  }function f(e) {
    var r = new t.BufferGeometry(),
        i = new Float32Array([-1, -1, 1, 1, -1, 1, 1, 1, 1, 1, 1, 1, -1, 1, 1, -1, -1, 1]);r.addAttribute("position", new t.BufferAttribute(i, 3));var a = new t.Mesh(r, new t.MeshBasicMaterial());return a.material = new t.ShaderMaterial({ uniforms: I = { texture: { type: "tv", get value() {
            return n.getTextures();
          } }, vCam: { type: "v3", get value() {
            return o.getCamera().position;
          } }, curvature: { type: "f", get value() {
            return e.curvature || 0;
          } } }, vertexShader: s.vertexShader, fragmentShader: s.fragmentShader, transparent: !0, depthWrite: !1, depthTest: !0 }), a.frustumCulled = !1, a;
  }function c(t, e) {
    for (var r = o.getCamera(), n = 0; n < e; n++) {
      t[n].zIndex = -r.position.distanceToManhattan(t[n].position);
    }q(t, e), a(t, e, g);
  }function d(t) {
    q = t ? t : function () {};
  }function g(t) {
    return t.zIndex;
  }function p() {
    var e,
        r = this.imageCount,
        n = x.attributes.position.count,
        i = this.mesh,
        o = i.geometry;if ((!o.attributes.position || o.attributes.position.count < r * n) && (e = o.attributes.position, o.attributes.position = new t.BufferAttribute(new Float32Array(r * n * 3), 3), e && o.attributes.position.copyArray(e.array), o.attributes.position.setDynamic(!0)), (!o.attributes.spot || o.attributes.spot.count < r * n) && (e = o.attributes.spot, o.attributes.spot = new t.BufferAttribute(new Float32Array(r * n * 3), 3), e && o.attributes.spot.copyArray(e.array), o.attributes.spot.setDynamic(!0)), (!o.attributes.quaternion || o.attributes.quaternion.count < r * n) && (e = o.attributes.quaternion, o.attributes.quaternion = new t.BufferAttribute(new Float32Array(r * n * 4), 4), e && o.attributes.quaternion.copyArray(e.array), o.attributes.quaternion.setDynamic(!0)), (!o.attributes.uv || o.attributes.uv.count < r * n) && (e = o.attributes.uv, o.attributes.uv = new t.BufferAttribute(new Float32Array(r * n * 2), 2), e && o.attributes.uv.copyArray(e.array), o.attributes.uv.setDynamic(!0)), (!o.attributes.tex || o.attributes.tex.count < r * n) && (e = o.attributes.tex, o.attributes.tex = new t.BufferAttribute(new Float32Array(r * n), 1), e && o.attributes.tex.copyArray(e.array), o.attributes.tex.setDynamic(!0)), (!o.attributes.light || o.attributes.light.count < r * n) && (e = o.attributes.light, o.attributes.light = new t.BufferAttribute(new Float32Array(r * n), 1), e && o.attributes.light.copyArray(e.array), o.attributes.light.setDynamic(!0)), !o.index || o.index.count < r * x.index.array.length) {
      e = o.index;var a = x.index.array;o.index = new t.BufferAttribute(new Uint16Array(r * a.length), 1), e && o.index.copyArray(e.array), o.index.setDynamic(!0);
    }c(this.imageOrder, r);
  }function y() {
    this.render();for (var t = this.images, e = this.imageOrder, r = this.imageCount, n = this.mesh.geometry, i = n.attributes.quaternion.array, o = n.attributes.spot.array, a = n.attributes.position.array, s = n.attributes.tex.array, u = n.attributes.light.array, l = n.attributes.uv.array, h = n.index.array, f = !1, c = !1, d = !1, g = !1, p = !1, y = !1, m = 0; m < r; m++) {
      var v = t[m],
          b = v.index;if (v.quatDirty) {
        var w = v.quaternionArray;i.set(w, 16 * b), v.quatDirty = !1, f = !0;
      }v.positionDirty && (o.set(v.spotArray, 12 * b), v.positionDirty = !1, c = !0), v.verticesDirty && (a.set(v.vertices, 12 * b), v.verticesDirty = !1, g = !0), v.uvDirty && (l.set(v.uv, 8 * b), v.uvDirty = !1, p = !0), v.texDirty && (s.fill(v.tex, 4 * b, 4 * b + 4), v.texDirty = !1, d = !0), v.lightDirty && (u.fill(v.light, 4 * b, 4 * b + 4), v.lightDirty = !1, y = !0);
    }for (m = 0; m < r; m++) {
      h.set(e[m].indexArray, 6 * m);
    }0 === n.drawRange.start && n.drawRange.count === r * x.index.count || n.setDrawRange(0, r * x.index.count), y && (n.attributes.light.needsUpdate = !0), f && (n.attributes.quaternion.needsUpdate = !0), c && (n.attributes.spot.needsUpdate = !0), g && (n.attributes.position.needsUpdate = !0), d && (n.attributes.tex.needsUpdate = !0), p && (n.attributes.uv.needsUpdate = !0), n.index.needsUpdate = !0, this.clear();
  }function m() {
    for (var t = 0; t < A.length; t++) {
      A[t].destroy();
    }A.length = 0;
  }function v() {
    this.mesh && (this.mesh.geometry.dispose(), this.mesh.material.dispose()), this.mesh = null, this.images.length = 0, this.imageCount = 0;
  }var x = new t.PlaneBufferGeometry(1, 1),
      b = x.attributes.position.count,
      w = x.index.array,
      A = [],
      I = null,
      q = function q() {};return u.prototype.destroy = v, u.prototype.render = p, u.prototype.updateGraphics = y, u.prototype.clear = h, l.prototype.index = 0, l.prototype.position = null, l.prototype.spotArray = null, l.prototype.indexArray = null, l.prototype.tex = -1, l.prototype.size = null, l.prototype.uv = null, l.prototype.vertices = null, l.prototype.light = 1, l.prototype.zIndex = 0, l.prototype.quaternionArray = null, l.prototype.positionDirty = !0, l.prototype.verticesDirty = !0, l.prototype.texDirty = !0, l.prototype.uvDirty = !0, l.prototype.lightDirty = !0, l.prototype.quatDirty = !0, l.prototype.spriteObject = null, u.setIndexProcessor = d, e.onDestroy(m), u;
}), define("collection", ["utils", "spritesheet", "spriteobject", "camera"], function (t, e, r, n) {
  "use strict";
  function i() {}function o(e, r, n) {
    if (this.options = e || {}, this.getSprite = r ? r : i, n) this.forEach = n.bind(this);else switch (this.options.type) {case "grid":
        this.forEach = a.bind(this);break;default:
        t.handleError("Collection type not recognized");}
  }function a(t) {
    for (var e = this.options.count || 1, r = this.options.width * this.options.height, n = r * e, i = 0; i < n; i++) {
      var o = this.options.x + i % this.options.width,
          a = this.options.y + Math.floor(i / this.options.width) % this.options.height,
          s = Math.floor(i / r),
          u = this.getSprite(o, a, s);
      u && (u.forEach ? u.forEach(t) : t(u));
    }
  }function s() {}function u(t) {
    var n = t.x,
        i = t.y,
        o = t.index,
        a = cellSize,
        s = 1,
        u = e.spritesheet.sprite[o];return r.create().init(n * cellSize, i * cellSize, a / 2, a, a, null, s, u);
  }function l(t) {
    return f.length = 0, cube.faces.push(r.create().init(x * cellSize, y * cellSize, size / 2, size, size, n.quaternions.southQuaternionArray, light, img)), f;
  }function h(t) {
    function e(t, e, r) {
      this.uid = "uid" + c++, h[this.uid] = this, this.index = r, this.enterArea(t, e);
    }function r(t, e) {
      return t = Math.floor(t / s), e = Math.floor(e / s), t + "_" + e;
    }function i() {
      var t = 64,
          e = n.getCamera(),
          r = e.position.x,
          i = e.position.y;return d.x = Math.round(r / t), d.y = Math.round(i / t) + 6, d;
    }var a = [],
        s = 50,
        h = {},
        f = function f(t) {
      switch (t.type) {case "face":
          return u(t);case "cube":
          return l(t);}
    };t.spriteFunction && (f = t.spriteFunction);var c = 0;e.prototype.leaveArea = function () {
      var t = r(this.x, this.y),
          e = a[t];if (e) {
        var n = Math.floor(this.x) + "_" + Math.floor(this.y);e[n] && delete e[n][this.uid];
      }
    }, e.prototype.enterArea = function (t, e) {
      this.x = t, this.y = e;var n = r(this.x, this.y),
          i = a[n] || (a[n] = {}),
          o = Math.floor(this.x) + "_" + Math.floor(this.y);i[o] = i[o] || (i[o] = {}), i[o][this.uid] = this;
    }, e.prototype.move = function (t, e) {
      this.leaveArea(), this.enterArea(t, e);
    };var d = { x: 0, y: 0 },
        g = new o(t, f, function (t) {
      for (var e = i(), r = Math.floor(e.x / s), n = Math.floor(e.y / s), o = 1, u = n - o; u <= n + o; u++) {
        for (var l = r - o; l <= r + o; l++) {
          var h = a[l + "_" + u];if (h) for (var f in h) {
            var c = h[f];for (var d in c) {
              var g = this.getSprite(c[d]);Array.isArray(g) ? g.forEach(t) : t(g);
            }
          }
        }
      }
    });return g.create = function (t, r, n) {
      return new e(t, r, n);
    }, g.get = function (t, e) {
      var n = r(t, e),
          i = a[n],
          o = Math.floor(t) + "_" + Math.floor(e);return i ? i[o] : null;
    }, g.find = function (t) {
      return h[t];
    }, g;
  }o.prototype.pos = null, o.prototype.size = null, o.prototype.getSprite = i, o.prototype.forEach = i, o.prototype.options = null, o.prototype.getSprite = i, o.prototype.isCollection = !0;var f = [];return o.createSpriteCollection = h, t.onDestroy(s), o;
}), define("mouse", ["utils"], function (t) {
  "use strict";
  function e(t) {
    if (void 0 === t.target.attributes.tap) {
      var e = t.changedTouches;if (e) for (var r = 0; r < e.length; r++) {
        var n = e[r];f[n.identifier] = n.pageX, c[n.identifier] = n.pageY;
      } else l.x = t.pageX, l.y = t.pageY;d = !0;for (var r = 0; r < h.length; r++) {
        h[r](null, null, !0, t.pageX, t.pageY);
      }
    }t.preventDefault();
  }function r(t) {
    var e = !1;if (t.changedTouches) {
      for (var r = 0; r < t.changedTouches.length; r++) {
        delete f[touch.identifier], delete c[touch.identifier];
      }for (var r in f) {
        e = !0;
      }
    }for (var r = 0; r < h.length; r++) {
      h[r](null, null, e, t.pageX, t.pageY);
    }d = !1, t.preventDefault();
  }function n(t) {
    t = t || event;var e = t.changedTouches;if (e) {
      if (d) {
        for (var r = 0, n = 0, i = 0; i < e.length; i++) {
          var o = e[i];r += o.pageX - f[o.identifier], n += o.pageY - c[o.identifier], f[o.identifier] = o.pageX, c[o.identifier] = o.pageY;
        }for (var i = 0; i < h.length; i++) {
          h[i](r, n, !0, t.pageX, t.pageY);
        }
      }
    } else {
      var a = "buttons" in t && 1 === t.buttons || 1 === (t.which || t.button);if (a && d) {
        var s = t.pageX,
            u = t.pageY,
            r = s - l.x,
            n = u - l.y;l.x = s, l.y = u;for (var i = 0; i < h.length; i++) {
          h[i](r, n, !0, t.pageX, t.pageY);
        }
      } else {
        d = !1;for (var i = 0; i < h.length; i++) {
          h[i](r, n, !1, t.pageX, t.pageY);
        }
      }
    }t.preventDefault();
  }function i(t) {
    a(), o(), h.push(t);
  }function o() {
    document.addEventListener("mousedown", e), document.addEventListener("touchstart", e), document.addEventListener("mouseup", r), document.addEventListener("touchend", r), document.addEventListener("touchcancel", r), document.addEventListener("mousemove", n), document.addEventListener("touchmove", n);
  }function a() {
    document.removeEventListener("mousedown", e), document.removeEventListener("touchstart", e), document.removeEventListener("mouseup", r), document.removeEventListener("touchend", r), document.removeEventListener("touchcancel", r), document.removeEventListener("mousemove", n), document.removeEventListener("touchmove", n);
  }function s() {
    h = [], a();
  }function u() {}var l = { x: 0, y: 0 },
      h = [],
      f = {},
      c = {},
      d = !1;return u.setOnTouch = i, t.onDestroy(s), u;
}), define("dobuki", ["utils", "loop", "gifHandler", "camera", "objectpool", "spriteobject", "packer", "spritesheet", "spriterenderer", "collection", "mouse", "loader"], function (t, e, r, n, i, o, a, s, u, l, h, f) {
  return { Utils: t, Loop: e, GifHandler: r, Camera: n, ObjectPool: i, SpriteObject: o, SpriteSheet: s, SpriteRenderer: u, Collection: l, Mouse: h, Loader: f };
}), requirejs.config({ paths: { threejs: "https://cdnjs.cloudflare.com/ajax/libs/three.js/85/three.min", dobuki: "dobuki", jsgif: "jsgif/gif" }, urlArgs: location.search.match(/\bdebug\b|\bdisable_cache\b/g) ? "time=" + Date.now() : "" }), require(["dobuki"], function (t) {}), define("main", function () {});
//# sourceMappingURL=dok.min.js.map