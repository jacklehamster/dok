{"version":3,"sources":["../gifhandler.js"],"names":["define","Utils","Loop","gWorker","gifWorker","gifWorkerCallbacks","gifs","isGif","src","block","split","slice","toLowerCase","indexOf","getGif","createGif","renderTime","currentFrame","maxFrameCompleted","gifInfo","framesProcessed","header","frameInfos","canvases","callbacks","processNextFrame","frame","frameInfo","gce","img","canvas","document","createElement","style","position","left","top","width","height","ctx","getContext","webkitImageSmoothingEnabled","imageSmoothingEnabled","msImageSmoothingEnabled","drawImage","cData","getImageData","self","processNext","bind","sendToGifWorker","putImageData","ready","hdr","length","push","cycleTime","currentIndex","delayTime","getFrame","time","totalAnimationTime","Math","floor","min","eof","loadAsync","content","require","parseGIF","Stream","initializeGifWorker","onmessage","e","data","id","callback","md5","random","postMessage","buffer","destroyEverything","terminate","GifHandler","onDestroy"],"mappings":"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","file":"gifhandler.js","sourcesContent":["define([\n    'utils',\n    'loop',\n    'gifworkerwrapper',\n], function(Utils, Loop, gWorker) {\n    'use strict';\n\n    var gifWorker;\n    var gifWorkerCallbacks = {};\n    var gifs = {};\n\n    /**\n     *  CLASS DEFINITIONS\n     */\n\n    /**\n     *  FUNCTION DEFINITIONS\n     */\n    function isGif(src) {\n        return gifs[src] && gifs[src].block || src.split(\"?\")[0].slice(-4).toLowerCase() === \".gif\" || src.indexOf(\"data:image/gif;\") === 0;\n    }\n\n    function getGif(src) {\n        if (!gifs[src]) {\n            gifs[src] = createGif(src);\n        }\n        return gifs[src];\n    }\n\n    function createGif(src) {\n        var renderTime = 0;\n        var currentFrame = 0;\n        var maxFrameCompleted = 0;\n\n        var gifInfo = {\n            framesProcessed: 0,\n            header: null,\n            frameInfos: [],\n            block: null,\n            canvases: [],\n            callbacks: [],\n            processNextFrame: function() {\n                var frame = this.framesProcessed;\n                var frameInfo = this.frameInfos[frame];\n\n                if(frameInfo && frameInfo.gce && frameInfo.img && this.header) {\n                    var canvas = document.createElement(\"canvas\");\n                    canvas.style.position = \"absolute\";\n                    canvas.style.left = 0;\n                    canvas.style.top = 0;\n                    canvas.width = this.header.width;\n                    canvas.height = this.header.height;\n                    var ctx = canvas.getContext(\"2d\");\n                    ctx.webkitImageSmoothingEnabled = false;\n                    ctx.imageSmoothingEnabled = false;\n                    ctx.msImageSmoothingEnabled = false;\n\n                    this.canvases[frame] = canvas;\n                    if(frame>0) { //  copy previous frame. That's how gifs work\n                        ctx.drawImage(this.canvases[frame-1], 0, 0);\n                    }\n\n                    var cData = ctx.getImageData(0,0,canvas.width,canvas.height);\n\n                    var self = this;\n                    var processNext = this.processNextFrame.bind(this);\n                    sendToGifWorker(frameInfo, cData, this.header, function(cData, frameInfo) {\n                        ctx.putImageData(cData, 0, 0);\n                        if(self.callbacks[frameInfo.frame]) {\n                            self.callbacks[frameInfo.frame]();\n                        }\n                        maxFrameCompleted = frameInfo.frame;\n                        self.frameInfos[frameInfo.frame].ready = true;\n                        processNext();\n                    });\n                    currentFrame = this.framesProcessed;\n                    this.framesProcessed++;\n//                    document.body.appendChild(canvas);\n                }\n            },\n            hdr: function (hdr) {\n                this.header = hdr;\n            },\n            gce: function (gce) {\n                if(this.frameInfos.length==0 || this.frameInfos[this.frameInfos.length-1].gce) {\n                    this.frameInfos.push({\n                        gce:null,\n                        cycleTime:null,\n                        img:null,\n                        frame: this.frameInfos.length,\n                        ready: false,\n                    });\n                }\n                var currentIndex = this.frameInfos.length-1;\n                this.frameInfos[currentIndex].gce = gce;\n                if(!gce.delayTime) {\n                    gce.delayTime = 1;\n                }\n                this.frameInfos[currentIndex].cycleTime = gce.delayTime * 10\n                    + (currentIndex === 0 ? 0 : this.frameInfos[currentIndex-1].cycleTime);\n                this.processNextFrame();\n            },\n            img: function(img) {\n                if(this.frameInfos.length===0 || this.frameInfos[this.frameInfos.length-1].img) {\n                    this.frameInfos.push({});\n                }\n                this.frameInfos[this.frameInfos.length-1].img = img;\n                this.processNextFrame();\n            },\n            getFrame: function() {\n                if(this.block && Loop.time > renderTime) {\n                    currentFrame = (currentFrame+1) % this.frameInfos.length;\n                    var totalAnimationTime = this.frameInfos[this.frameInfos.length-1].cycleTime;\n                    renderTime = Math.floor(Loop.time / totalAnimationTime) * totalAnimationTime + this.frameInfos[currentFrame].cycleTime;\n                }\n                return Math.min(currentFrame,maxFrameCompleted);\n            },\n            eof: function(block) {\n                this.block = block;\n                this.processNextFrame();\n            }\n        };\n\n        Utils.loadAsync(src, function(content) {\n            require(['https://jacklehamster.github.io/jsgif/gif.js'],\n                function() {\n                    parseGIF(new Stream(content), gifInfo);\n                }\n            );\n        }, true);\n\n        return gifInfo;\n    }\n\n    function initializeGifWorker() {\n        gifWorker = gWorker;\n//        gifWorker = new Worker(require.toUrl(\"workers/gifworker.js\"));\n        gifWorker.onmessage = function(e) {\n           gifWorkerCallbacks[e.data.id] (e.data.cData, e.data.frameInfo);\n           delete gifWorkerCallbacks[e.data.id];\n        }\n    }\n\n    function sendToGifWorker(frameInfo, cData, header, callback) {\n        if(!gifWorker) {\n            initializeGifWorker();\n        }\n        require([' https://cdnjs.cloudflare.com/ajax/libs/blueimp-md5/2.7.0/js/md5.min.js'],\n            function(md5) {\n                var id = md5(Math.random()+\"\"+Loop.time);\n                gifWorkerCallbacks[id] = callback;\n                gifWorker.postMessage({\n                    frameInfo: frameInfo,\n                    cData: cData,\n                    header: header,\n                    id: id\n                }, [cData.data.buffer]);\n        });\n    }\n\n    function destroyEverything() {\n        if(gifWorker) {\n            gifWorker.terminate();\n        }\n        gifWorker = null;\n        gifWorkerCallbacks = null;\n        gifs = {};\n    }\n\n    /**\n     *  PUBLIC DECLARATIONS\n     */\n    function GifHandler() {\n    }\n\n    GifHandler.getGif = getGif;\n    GifHandler.isGif = isGif;\n    Utils.onDestroy(destroyEverything);\n\n    return GifHandler;\n\n });\n"]}