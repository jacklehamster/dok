{"version":3,"sources":["../camera.js"],"names":["define","THREE","Loop","gameWidth","innerWidth","gameHeight","innerHeight","camera","camera2d","OrthographicCamera","camera3d","PerspectiveCamera","cameraQuaternionData","array","Float32Array","forwardMovement","Vector3","version","lastQuat","Quaternion","tempQuat","tempQuatArray","upVector","groundQuat","setFromAxisAngle","Math","PI","getCamera","nop","setCamera3d","value","copyCamera","updateQuaternionData","quaternion","toArray","set","applyQuaternion","getCameraQuaternionData","equals","copy","initCameras","position","isCamera3d","from","to","getCameraPosition","setCameraPosition","data","is3d","fromArray","updateProjectionMatrix","shadowQuatArray","x","y","angle","atan2","z","multiply","quaternionArrays","quaternions","groundQuaternionArray","southQuaternionArray","northQuaternionArray","westQuaternionArray","eastQuaternionArray","ceilingQuaternionArray","checkWindowSize","width","height","left","right","top","bottom","aspect","Camera"],"mappings":"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","file":"camera.js","sourcesContent":["define([\n    'threejs', 'loop',\n], function(THREE, Loop) {\n    'use strict';\n\n    let gameWidth = innerWidth, gameHeight = innerHeight;\n    let camera;\n    const camera2d = new THREE.OrthographicCamera(\n        -gameWidth / 2, gameWidth / 2,\n        gameHeight / 2, -gameHeight / 2,\n        0.1, 1000000);\n    const camera3d = new THREE.PerspectiveCamera(75, gameWidth / gameHeight, 0.1, 1000000);\n    const cameraQuaternionData = {\n            array: new Float32Array(4),\n            forwardMovement: new THREE.Vector3(0, 0, 1),\n            version: 0,\n        }, lastQuat = new THREE.Quaternion(), tempQuat = new THREE.Quaternion(),\n        tempQuatArray = new Float32Array(4), upVector = new THREE.Vector3(0, 1, 0);\n    const groundQuat = new THREE.Quaternion().setFromAxisAngle(\n        new THREE.Vector3(1, 0, 0), -Math.PI / 2\n    );\n\n    /**\n     *  FUNCTION DEFINITIONS\n     */\n    function getCamera() {\n        return camera;\n    }\n\n    function nop() {\n    }\n\n    function setCamera3d(value) {\n        if (value && camera !== camera3d) {\n            camera = camera3d;\n            copyCamera(camera2d, camera);\n        } else if (!value && camera === camera3d) {\n            camera = camera2d;\n            copyCamera(camera3d, camera);\n        }\n        updateQuaternionData();\n    }\n\n    function updateQuaternionData() {\n        camera.quaternion.toArray(cameraQuaternionData.array);\n        cameraQuaternionData.forwardMovement.set(0, 0, 1);\n        cameraQuaternionData.forwardMovement.applyQuaternion(camera.quaternion);\n    }\n\n    function getCameraQuaternionData() {\n        if (!camera.quaternion.equals(lastQuat)) {\n            updateQuaternionData();\n            lastQuat.copy(camera.quaternion);\n        }\n        return cameraQuaternionData;\n    }\n\n    function initCameras() {\n        camera2d.position.set(0, 0, 400);\n        camera3d.position.set(0, 0, 400);\n    }\n\n    function isCamera3d() {\n        return camera === camera3d;\n    }\n\n    function copyCamera(from, to) {\n        to.position.copy(from.position);\n        to.quaternion.copy(from.quaternion);\n    }\n\n    function getCameraPosition() {\n        return {\n            'is3d': isCamera3d(),\n            'position': camera.position.toArray(),\n            'quaternion': camera.quaternion.toArray(),\n        };\n    }\n\n    function setCameraPosition(data) {\n        setCamera3d(data.is3d);\n        camera.quaternion.fromArray(data.quaternion);\n        camera.position.fromArray(data.position);\n        camera.updateProjectionMatrix();\n    }\n\n    function shadowQuatArray(x, y) {\n        const angle = -Math.atan2(y - camera.position.z, x - camera.position.x) - Math.PI / 2;\n        tempQuat.setFromAxisAngle(upVector, angle);\n        tempQuat.multiply(groundQuat);\n        return tempQuat.toArray(tempQuatArray);\n    }\n\n    function quaternionArrays() {\n        const quaternions = {};\n        quaternions.groundQuaternionArray =  new THREE.Quaternion().setFromAxisAngle(\n            new THREE.Vector3(1,0,0), -Math.PI/2\n        ).toArray(new Float32Array(4));\n        quaternions.southQuaternionArray =  new THREE.Quaternion().toArray(new Float32Array(4));\n        quaternions.northQuaternionArray =  new THREE.Quaternion().setFromAxisAngle(\n            new THREE.Vector3(0,1,0), -Math.PI\n        ).toArray(new Float32Array(4));\n        quaternions.westQuaternionArray =  new THREE.Quaternion().setFromAxisAngle(\n            new THREE.Vector3(0,1,0), -Math.PI/2\n        ).toArray(new Float32Array(4));\n        quaternions.eastQuaternionArray =  new THREE.Quaternion().setFromAxisAngle(\n            new THREE.Vector3(0,1,0), Math.PI/2\n        ).toArray(new Float32Array(4));\n        quaternions.ceilingQuaternionArray = new THREE.Quaternion().setFromAxisAngle(\n            new THREE.Vector3(1,0,0), Math.PI/2\n        ).toArray(new Float32Array(4));\n        return quaternions;\n    }\n\n    function checkWindowSize(width, height) {\n        if (gameWidth !== width || gameHeight !== height) {\n            gameWidth = width;\n            gameHeight = height;\n            camera2d.left = -gameWidth / 2;\n            camera2d.right = gameWidth / 2;\n            camera2d.top = gameHeight / 2;\n            camera2d.bottom = -gameHeight / 2;\n            camera2d.updateProjectionMatrix();\n            camera3d.aspect = gameWidth / gameHeight;\n            camera3d.updateProjectionMatrix();\n        }\n    }\n\n    /**\n     *  PUBLIC DECLARATIONS\n     */\n    function Camera() {\n    }\n\n    Camera.setCamera3d = setCamera3d;\n    Camera.isCamera3d = isCamera3d;\n    Camera.getCamera = getCamera;\n    Camera.setCameraPosition = setCameraPosition;\n    Camera.getCameraPosition = getCameraPosition;\n    Camera.getCameraQuaternionData = getCameraQuaternionData;\n    Camera.shadowQuatArray = shadowQuatArray;\n    Camera.quaternions = quaternionArrays();\n    Camera.checkWindowSize = checkWindowSize;\n\n    /**\n     *   PROCESSES\n     */\n    initCameras();\n    setCamera3d(true);\n\n    return Camera;\n});\n"]}