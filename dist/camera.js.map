{"version":3,"sources":["../camera.js"],"names":["define","THREE","Loop","camera","camera2d","OrthographicCamera","innerWidth","innerHeight","camera3d","PerspectiveCamera","cameraQuaternionData","array","Float32Array","forwardMovement","Vector3","version","lastQuat","Quaternion","tempQuat","tempQuatArray","upVector","groundQuat","setFromAxisAngle","Math","PI","getCamera","nop","setCamera3d","value","copyCamera","updateQuaternionData","quaternion","toArray","set","applyQuaternion","getCameraQuaternionData","equals","copy","initCameras","position","isCamera3d","from","to","getCameraPosition","setCameraPosition","data","is3d","fromArray","updateProjectionMatrix","shadowQuatArray","x","y","angle","atan2","z","multiply","quaternionArrays","quaternions","groundQuaternionArray","southQuaternionArray","northQuaternionArray","westQuaternionArray","eastQuaternionArray","ceilingQuaternionArray","checkWindowSize","gameWidth","gameHeight","left","right","top","bottom","aspect","Camera","addLoop"],"mappings":"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","file":"camera.js","sourcesContent":["define([\n    'threejs', 'loop',\n], function(THREE, Loop) {\n    'use strict';\n\n    var camera;\n    var camera2d = new THREE.OrthographicCamera(-innerWidth / 2, innerWidth / 2, innerHeight / 2, -innerHeight / 2, 0.1, 1000000);\n    var camera3d = new THREE.PerspectiveCamera(75, innerWidth / innerHeight, 0.1, 1000000);\n    var cameraQuaternionData = {\n            array: new Float32Array(4),\n            forwardMovement: new THREE.Vector3(0, 0, 1),\n            version: 0,\n        }, lastQuat = new THREE.Quaternion(), tempQuat = new THREE.Quaternion(),\n        tempQuatArray = new Float32Array(4), upVector = new THREE.Vector3(0, 1, 0);\n    var groundQuat = new THREE.Quaternion().setFromAxisAngle(\n        new THREE.Vector3(1, 0, 0), -Math.PI / 2\n    );\n\n    /**\n     *  FUNCTION DEFINITIONS\n     */\n    function getCamera() {\n        return camera;\n    }\n\n    function nop() {\n    }\n\n    function setCamera3d(value) {\n        if (value && camera !== camera3d) {\n            camera = camera3d;\n            copyCamera(camera2d, camera);\n        } else if (!value && camera === camera3d) {\n            camera = camera2d;\n            copyCamera(camera3d, camera);\n        }\n        updateQuaternionData();\n    }\n\n    function updateQuaternionData() {\n        camera.quaternion.toArray(cameraQuaternionData.array);\n        cameraQuaternionData.forwardMovement.set(0, 0, 1);\n        cameraQuaternionData.forwardMovement.applyQuaternion(camera.quaternion);\n    }\n\n    function getCameraQuaternionData() {\n        if (!camera.quaternion.equals(lastQuat)) {\n            updateQuaternionData();\n            lastQuat.copy(camera.quaternion);\n        }\n        return cameraQuaternionData;\n    }\n\n    function initCameras() {\n        camera2d.position.set(0, 0, 400);\n        camera3d.position.set(0, 0, 400);\n    }\n\n    function isCamera3d() {\n        return camera === camera3d;\n    }\n\n    function copyCamera(from, to) {\n        to.position.copy(from.position);\n        to.quaternion.copy(from.quaternion);\n    }\n\n    function getCameraPosition() {\n        return {\n            'is3d': isCamera3d(),\n            'position': camera.position.toArray(),\n            'quaternion': camera.quaternion.toArray(),\n        };\n    }\n\n    function setCameraPosition(data) {\n        setCamera3d(data.is3d);\n        camera.quaternion.fromArray(data.quaternion);\n        camera.position.fromArray(data.position);\n        camera.updateProjectionMatrix();\n    }\n\n    function shadowQuatArray(x, y) {\n        var angle = -Math.atan2(y - camera.position.z, x - camera.position.x) - Math.PI / 2;\n        tempQuat.setFromAxisAngle(upVector, angle);\n        tempQuat.multiply(groundQuat);\n        return tempQuat.toArray(tempQuatArray);\n    }\n\n    function quaternionArrays() {\n        var quaternions = {};\n        quaternions.groundQuaternionArray =  new THREE.Quaternion().setFromAxisAngle(\n            new THREE.Vector3(1,0,0), -Math.PI/2\n        ).toArray(new Float32Array(4));\n        quaternions.southQuaternionArray =  new THREE.Quaternion().toArray(new Float32Array(4));\n        quaternions.northQuaternionArray =  new THREE.Quaternion().setFromAxisAngle(\n            new THREE.Vector3(0,1,0), -Math.PI\n        ).toArray(new Float32Array(4));\n        quaternions.westQuaternionArray =  new THREE.Quaternion().setFromAxisAngle(\n            new THREE.Vector3(0,1,0), -Math.PI/2\n        ).toArray(new Float32Array(4));\n        quaternions.eastQuaternionArray =  new THREE.Quaternion().setFromAxisAngle(\n            new THREE.Vector3(0,1,0), Math.PI/2\n        ).toArray(new Float32Array(4));\n        quaternions.ceilingQuaternionArray = new THREE.Quaternion().setFromAxisAngle(\n            new THREE.Vector3(1,0,0), Math.PI/2\n        ).toArray(new Float32Array(4));\n        return quaternions;\n    }\n\n    function checkWindowSize() {\n        var gameWidth = innerWidth;\n        var gameHeight = innerHeight;\n        camera2d.left = -gameWidth / 2;\n        camera2d.right = gameWidth / 2;\n        camera2d.top = gameHeight / 2;\n        camera2d.bottom = -gameHeight / 2;\n        camera2d.updateProjectionMatrix();\n        camera3d.aspect = gameWidth / gameHeight;\n        camera3d.updateProjectionMatrix();\n    }\n\n    /**\n     *  PUBLIC DECLARATIONS\n     */\n    function Camera() {\n    }\n\n    Camera.setCamera3d = setCamera3d;\n    Camera.isCamera3d = isCamera3d;\n    Camera.getCamera = getCamera;\n    Camera.setCameraPosition = setCameraPosition;\n    Camera.getCameraPosition = getCameraPosition;\n    Camera.getCameraQuaternionData = getCameraQuaternionData;\n    Camera.shadowQuatArray = shadowQuatArray;\n    Camera.quaternions = quaternionArrays();\n\n    /**\n     *   PROCESSES\n     */\n    initCameras();\n    setCamera3d(true);\n\n    Loop.addLoop(checkWindowSize);\n\n    return Camera;\n});\n"]}