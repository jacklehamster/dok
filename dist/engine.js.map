{"version":3,"sources":["../engine.js"],"names":["define","THREE","Loader","Loop","Camera","Engine","options","self","renderer","WebGLRenderer","canvas","sortObjects","setPixelRatio","window","devicePixelRatio","setClearColor","addEventListener","e","windowResized","scene","Scene","sceneWidth","sceneHeight","domElement","style","display","setOnLoad","addLoop","checkResize","render","getCamera","ready","width","parentElement","offsetWidth","height","offsetHeight","setSize","checkWindowSize","prototype"],"mappings":";;AAAAA,OAAO,CACH,SADG,EAEH,QAFG,EAGH,MAHG,EAIH,QAJG,CAAP,EAKG,UAASC,KAAT,EAAgBC,MAAhB,EAAwBC,IAAxB,EAA8BC,MAA9B,EAAsC;AACrC,aAASC,MAAT,CAAgBC,OAAhB,EAAyB;AACrB,YAAMC,OAAO,IAAb;AACAD,kBAAUA,WAAW,EAArB;AACA,YAAME,WAAW,KAAKA,QAAL,GAAgB,IAAIP,MAAMQ,aAAV,CAAwB;AACrDC,oBAAQJ,QAAQI;AADqC,SAAxB,CAAjC;AAGA,aAAKF,QAAL,CAAcG,WAAd,GAA4B,KAA5B;AACA,aAAKH,QAAL,CAAcI,aAAd,CAA4BC,OAAOC,gBAAnC;AACA,aAAKN,QAAL,CAAcO,aAAd,CAA6B,OAA7B,EAAsC,CAAtC;AACAF,eAAOG,gBAAP,CAAwB,QAAxB,EAAiC,UAASC,CAAT,EAAY;AACzCC,4BAAgB,IAAhB;AACH,SAFD;AAGA,YAAMC,QAAQ,KAAKA,KAAL,GAAa,IAAIlB,MAAMmB,KAAV,EAA3B;AACA,YAAIC,aAAa,CAAjB;AAAA,YAAoBC,cAAc,CAAlC;AAAA,YAAqCJ,gBAAgB,IAArD;AACA,aAAKV,QAAL,CAAce,UAAd,CAAyBC,KAAzB,CAA+BC,OAA/B,GAAyC,MAAzC;AACAvB,eAAOwB,SAAP,CAAiB,YAAY;AACzBlB,qBAASe,UAAT,CAAoBC,KAApB,CAA0BC,OAA1B,GAAoC,EAApC;AACAtB,iBAAKwB,OAAL,CAAa,YAAW;AACpBC;AACApB,yBAASqB,MAAT,CAAgBV,KAAhB,EAAuBf,OAAO0B,SAAP,EAAvB;AACH,aAHD;AAIAvB,iBAAKwB,KAAL,GAAa,IAAb;AACH,SAPD;;AASA,iBAASH,WAAT,GAAuB;AACnB,gBAAMI,QAAQxB,SAASe,UAAT,CAAoBU,aAApB,CAAkCC,WAAhD;AACA,gBAAMC,SAAS3B,SAASe,UAAT,CAAoBU,aAApB,CAAkCG,YAAjD;AACA,gBAAGf,eAAeW,KAAf,IAAwBV,gBAAgBa,MAA3C,EAAmD;AAC/Cd,6BAAaW,KAAb;AACAV,8BAAca,MAAd;AACA3B,yBAAS6B,OAAT,CAAkBL,KAAlB,EAAyBG,MAAzB;AACA/B,uBAAOkC,eAAP,CAAwBN,KAAxB,EAA+BG,MAA/B;AACH;AACJ;AACJ;AACD9B,WAAOkC,SAAP,CAAiB/B,QAAjB,GAA4B,IAA5B;AACAH,WAAOkC,SAAP,CAAiBpB,KAAjB,GAAyB,IAAzB;AACAd,WAAOkC,SAAP,CAAiBR,KAAjB,GAAyB,KAAzB;;AAEA,WAAO1B,MAAP;AACH,CA9CD","file":"engine.js","sourcesContent":["define([\n    'threejs',\n    'loader',\n    'loop',\n    'camera',\n], function(THREE, Loader, Loop, Camera) {\n    function Engine(options) {\n        const self = this;\n        options = options || {};\n        const renderer = this.renderer = new THREE.WebGLRenderer({\n            canvas: options.canvas\n        });\n        this.renderer.sortObjects = false;\n        this.renderer.setPixelRatio(window.devicePixelRatio);\n        this.renderer.setClearColor ('white', 1);\n        window.addEventListener(\"resize\",function(e) {\n            windowResized = true;\n        });\n        const scene = this.scene = new THREE.Scene();\n        let sceneWidth = 0, sceneHeight = 0, windowResized = true;\n        this.renderer.domElement.style.display = \"none\";\n        Loader.setOnLoad(function () {\n            renderer.domElement.style.display = \"\";\n            Loop.addLoop(function() {\n                checkResize();\n                renderer.render(scene, Camera.getCamera());\n            });\n            self.ready = true;\n        });\n\n        function checkResize() {\n            const width = renderer.domElement.parentElement.offsetWidth;\n            const height = renderer.domElement.parentElement.offsetHeight;\n            if(sceneWidth !== width || sceneHeight !== height) {\n                sceneWidth = width;\n                sceneHeight = height;\n                renderer.setSize( width, height );\n                Camera.checkWindowSize( width, height );\n            }\n        }\n    }\n    Engine.prototype.renderer = null;\n    Engine.prototype.scene = null;\n    Engine.prototype.ready = false;\n\n    return Engine;\n});"]}