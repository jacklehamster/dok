{"version":3,"sources":["../spriterenderer.js"],"names":["define","THREE","Utils","SpriteObject","SpriteSheet","Camera","turboSort","Shader","Loop","planeGeometry","PlaneBufferGeometry","pointCount","attributes","position","count","indices","index","array","spriteRenderers","uniforms","indexProcessor","SpriteRenderer","images","imageOrder","imageCount","mesh","createMesh","curvature","self","display","spriteObject","image","cut","visible","getCut","img","time","ready","SpriteImage","Math","random","j","length","indexArray","quat","hasQuaternionArray","quaternionArray","getCameraQuaternionData","splatter","quatDirty","x","y","z","i","spotArray","positionDirty","size","vertices","v","verticesDirty","uv","uvDirty","tex","texDirty","light","lightDirty","wave","waveDirty","push","prototype","destroy","destroySprite","render","updateGraphics","clear","processGraphics","Vector3","Float32Array","Uint16Array","zIndex","spriteRenderer","geometry","BufferGeometry","addAttribute","BufferAttribute","Mesh","MeshBasicMaterial","material","ShaderMaterial","texture","type","value","getTextures","vCam","getCamera","performance","now","vertexShader","fragmentShader","transparent","depthWrite","depthTest","frustumCulled","sortImages","camera","distanceToManhattan","indexFunction","setIndexProcessor","fun","a","previousAttribute","copyArray","setDynamic","spot","quaternion","geo_quaternion","geo_spot","geo_pos","geo_tex","geo_light","geo_wave","geo_uv","geo_index","quatChanged","positionChanged","texChanged","verticesChanged","uvChanged","lightChanged","waveChanged","fill","drawRange","start","setDrawRange","needsUpdate","destroyEverything","dispose","onDestroy"],"mappings":"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","file":"spriterenderer.js","sourcesContent":["define([\n    'threejs',\n    'utils',\n    'spriteobject',\n    'spritesheet',\n    'camera',\n    'turbosort',\n    'shader',\n    'loop',\n], function(THREE, Utils, SpriteObject, SpriteSheet, Camera, turboSort, Shader, Loop) {\n    'use strict';\n\n    const planeGeometry = new THREE.PlaneBufferGeometry(1, 1);\n    const pointCount = planeGeometry.attributes.position.count;\n    const indices = planeGeometry.index.array;\n    let spriteRenderers = [];\n    let uniforms = null;\n    let indexProcessor = function(){};\n\n    /**\n     *  CLASS DEFINITIONS\n     */\n\n    function SpriteRenderer() {\n        this.images = [];\n        this.imageOrder = [];\n        this.imageCount = 0;\n        this.mesh = createMesh(this);\n        this.curvature = 0;\n\n        const self = this;\n\n        this.display = function (spriteObject) {\n            const index = self.imageCount;\n            let image = self.images[index];\n\n            const cut = spriteObject && spriteObject.visible\n                ? SpriteSheet.getCut(spriteObject.img, image ? image.time + Loop.time : Loop.time)\n                : null;\n            if (cut && cut.ready) {\n                if(!image) {\n                    image = self.images[index] = new SpriteImage();\n                    image.index = index;\n                    image.time = Math.random()*10000+Loop.time;\n\n                    for (let j=0; j<indices.length; j++) {\n                        image.indexArray[j] = indices[j] + image.index*4;\n                    }\n                }\n\n                const quat = spriteObject.hasQuaternionArray\n                    ? spriteObject.quaternionArray : Camera.getCameraQuaternionData().array;\n                if (image.quaternionArray[0] !== quat[0]\n                    || image.quaternionArray[1] !== quat[1]\n                    || image.quaternionArray[2] !== quat[2]\n                    || image.quaternionArray[3] !== quat[3]\n                ) {\n                    quat.splatter(image.quaternionArray,0)\n                        .splatter(image.quaternionArray,4)\n                        .splatter(image.quaternionArray,8)\n                        .splatter(image.quaternionArray,12);\n                    image.quatDirty = true;\n                }\n\n                if (spriteObject.position.x !== image.position.x\n                    || spriteObject.position.y !== image.position.y\n                    || spriteObject.position.z !== image.position.z\n                ) {\n                    image.position.x = spriteObject.position.x;\n                    image.position.y = spriteObject.position.y;\n                    image.position.z = spriteObject.position.z;\n                    for(let i=0; i<4; i++) {\n                        image.spotArray[i*3] = image.position.x;\n                        image.spotArray[i*3+1] = image.position.y;\n                        image.spotArray[i*3+2] = image.position.z;\n                    }\n                    image.positionDirty = true;\n                }\n\n                if (spriteObject.size[0] !== image.size[0]\n                    || spriteObject.size[1] !== image.size[1]\n                    || spriteObject.size[2] !== image.size[2]\n                    || image.positionDirty\n                ) {\n                    image.size[0] = spriteObject.size[0];\n                    image.size[1] = spriteObject.size[1];\n                    image.size[2] = spriteObject.size[2];\n                    const vertices = planeGeometry.attributes.position.array;\n                    for(let v=0; v<vertices.length; v++) {\n                        image.vertices[v] = vertices[v] * spriteObject.size[v%3] + image.spotArray[v];\n                    }\n                    image.verticesDirty = true;\n                }\n\n                if(image.uv !== cut.uv) {\n                    image.uv = cut.uv;\n                    image.uvDirty = true;\n                }\n\n                if(image.tex !== cut.tex) {\n                    image.tex = cut.tex;\n                    image.texDirty = true;\n                }\n\n                if(image.light !== spriteObject.light) {\n                    image.light = spriteObject.light;\n                    image.lightDirty = true;\n                }\n\n                if(image.wave !== spriteObject.wave) {\n                    image.wave = spriteObject.wave;\n                    image.waveDirty = true;\n                }\n\n                image.spriteObject = spriteObject;\n                self.imageOrder[index] = image;\n                self.imageCount++;\n            }\n            return image;\n        };\n\n        spriteRenderers.push(this);\n    }\n\n    SpriteRenderer.prototype.destroy = destroySprite;\n    SpriteRenderer.prototype.render = render;\n    SpriteRenderer.prototype.updateGraphics = updateGraphics;\n    SpriteRenderer.prototype.clear = clear;\n    SpriteRenderer.prototype.processGraphics = processGraphics;\n\n    function SpriteImage() {\n        this.position = new THREE.Vector3();\n        this.spotArray = new Float32Array(3 * pointCount);\n        this.size = new Float32Array(3);\n        this.vertices = new Float32Array(planeGeometry.attributes.position.array.length);\n        this.quaternionArray = new Float32Array(4 * pointCount);\n        this.indexArray = new Uint16Array(indices.length);\n    }\n    SpriteImage.prototype.index = 0;\n    SpriteImage.prototype.position = null;\n    SpriteImage.prototype.spotArray = null;\n    SpriteImage.prototype.indexArray = null;\n    SpriteImage.prototype.tex = -1;\n    SpriteImage.prototype.size = null;\n    SpriteImage.prototype.uv = null;\n    SpriteImage.prototype.vertices = null;\n    SpriteImage.prototype.light = 1;\n    SpriteImage.prototype.wave = 0;\n    SpriteImage.prototype.zIndex = 0;\n    SpriteImage.prototype.quaternionArray = null;\n    SpriteImage.prototype.positionDirty = true;\n    SpriteImage.prototype.verticesDirty = true;\n    SpriteImage.prototype.texDirty = true;\n    SpriteImage.prototype.uvDirty = true;\n    SpriteImage.prototype.lightDirty = true;\n    SpriteImage.prototype.waveDirty = true;\n    SpriteImage.prototype.quatDirty = true;\n\n    /**\n     *  FUNCTION DEFINITIONS\n     */\n\n    function clear() {\n        this.imageCount = 0;\n        SpriteObject.clear();\n    }\n\n    function createMesh(spriteRenderer) {\n        const geometry = new THREE.BufferGeometry();\n        const vertices = new Float32Array( [\n            -1.0, -1.0,  1.0,\n            1.0, -1.0,  1.0,\n            1.0,  1.0,  1.0,\n\n            1.0,  1.0,  1.0,\n            -1.0,  1.0,  1.0,\n            -1.0, -1.0,  1.0\n        ] );\n        geometry.addAttribute( 'position', new THREE.BufferAttribute( vertices, 3 ) );\n        const mesh = new THREE.Mesh(geometry, new THREE.MeshBasicMaterial());\n\n        mesh.material = new THREE.ShaderMaterial( {\n            uniforms: uniforms = {\n                texture:  {\n                    type: 'tv',\n                    get value() { return SpriteSheet.getTextures(); },\n                },\n                vCam : {\n                    type: \"v3\",\n                    get value() { return Camera.getCamera().position; },\n                },\n                curvature: {\n                    type: \"f\",\n                    get value() { return spriteRenderer.curvature || 0; },\n                },\n                time: {\n                    type: \"f\",\n                    get value() { return performance.now()/100; },\n                },\n            },\n            vertexShader: Shader.vertexShader,\n            fragmentShader: Shader.fragmentShader,\n            transparent:true,\n            depthWrite: false,\n            depthTest: true,\n        } );\n\n        mesh.frustumCulled = false;\n        return mesh;\n    }\n\n    function sortImages(images,count) {\n        const camera = Camera.getCamera();\n        for (let i = 0; i < count; i++) {\n            images[i].zIndex = -camera.position.distanceToManhattan(images[i].position);\n        }\n        indexProcessor(images, count);\n        turboSort(images,count,indexFunction);\n    }\n\n    function setIndexProcessor(fun) {\n        indexProcessor = fun ? fun : function(){};\n    }\n\n    function indexFunction(a) {\n        return a.zIndex;\n    }\n\n    function render() {\n        const imageCount = this.imageCount;\n        const pointCount = planeGeometry.attributes.position.count;\n        let previousAttribute;\n\n        const mesh = this.mesh;\n        const geometry = mesh.geometry;\n        if (!geometry.attributes.position || geometry.attributes.position.count < imageCount * pointCount) {\n            previousAttribute = geometry.attributes.position;\n            geometry.attributes.position = new THREE.BufferAttribute(\n                new Float32Array(imageCount * pointCount * 3), 3\n            );\n            if(previousAttribute)\n                geometry.attributes.position.copyArray(previousAttribute.array);\n            geometry.attributes.position.setDynamic(true);\n        }\n        if (!geometry.attributes.spot || geometry.attributes.spot.count < imageCount * pointCount) {\n            previousAttribute = geometry.attributes.spot;\n            geometry.attributes.spot = new THREE.BufferAttribute(\n                new Float32Array(imageCount * pointCount * 3), 3\n            );\n            if(previousAttribute)\n                geometry.attributes.spot.copyArray(previousAttribute.array);\n            geometry.attributes.spot.setDynamic(true);\n        }\n        if (!geometry.attributes.quaternion || geometry.attributes.quaternion.count < imageCount * pointCount) {\n            previousAttribute = geometry.attributes.quaternion;\n            geometry.attributes.quaternion = new THREE.BufferAttribute(\n                new Float32Array(imageCount * pointCount * 4), 4\n            );\n            if(previousAttribute)\n                geometry.attributes.quaternion.copyArray(previousAttribute.array);\n            geometry.attributes.quaternion.setDynamic(true);\n        }\n        if (!geometry.attributes.uv || geometry.attributes.uv.count < imageCount * pointCount) {\n            previousAttribute = geometry.attributes.uv;\n            geometry.attributes.uv = new THREE.BufferAttribute(\n                new Float32Array(imageCount * pointCount * 2), 2\n            );\n            if(previousAttribute)\n                geometry.attributes.uv.copyArray(previousAttribute.array);\n            geometry.attributes.uv.setDynamic(true);\n        }\n        if (!geometry.attributes.tex || geometry.attributes.tex.count < imageCount * pointCount) {\n            previousAttribute = geometry.attributes.tex;\n            geometry.attributes.tex = new THREE.BufferAttribute(\n                new Float32Array(imageCount * pointCount), 1\n            );\n            if(previousAttribute)\n                geometry.attributes.tex.copyArray(previousAttribute.array);\n            geometry.attributes.tex.setDynamic(true);\n        }\n        if (!geometry.attributes.light || geometry.attributes.light.count < imageCount * pointCount) {\n            previousAttribute = geometry.attributes.light;\n            geometry.attributes.light = new THREE.BufferAttribute(\n                new Float32Array(imageCount * pointCount), 1\n            );\n            if(previousAttribute)\n                geometry.attributes.light.copyArray(previousAttribute.array);\n            geometry.attributes.light.setDynamic(true);\n        }\n        if (!geometry.attributes.wave || geometry.attributes.wave.count < imageCount * pointCount) {\n            previousAttribute = geometry.attributes.wave;\n            geometry.attributes.wave = new THREE.BufferAttribute(\n                new Float32Array(imageCount * pointCount), 1\n            );\n            if(previousAttribute)\n                geometry.attributes.wave.copyArray(previousAttribute.array);\n            geometry.attributes.wave.setDynamic(true);\n        }\n        if (!geometry.index || geometry.index.count < imageCount * planeGeometry.index.array.length) {\n            previousAttribute = geometry.index;\n            const indices = planeGeometry.index.array;\n            geometry.index = new THREE.BufferAttribute(new Uint16Array(imageCount * indices.length), 1);\n            if(previousAttribute)\n                geometry.index.copyArray(previousAttribute.array);\n            geometry.index.setDynamic(true);\n        }\n\n        sortImages(this.imageOrder, imageCount);\n    }\n\n    function updateGraphics() {\n        this.render();\n        this.processGraphics();\n    }\n\n    function processGraphics() {\n        const images = this.images;\n        const imageOrder = this.imageOrder;\n        const imageCount = this.imageCount;\n        const geometry = this.mesh.geometry;\n        const geo_quaternion = geometry.attributes.quaternion.array;\n        const geo_spot = geometry.attributes.spot.array;\n        const geo_pos = geometry.attributes.position.array;\n        const geo_tex = geometry.attributes.tex.array;\n        const geo_light = geometry.attributes.light.array;\n        const geo_wave = geometry.attributes.wave.array;\n        const geo_uv = geometry.attributes.uv.array;\n        const geo_index = geometry.index.array;\n\n        let quatChanged = false;\n        let positionChanged = false;\n        let texChanged = false;\n        let verticesChanged = false;\n        let uvChanged = false;\n        let lightChanged = false;\n        let waveChanged = false;\n\n        for(let i=0;i<imageCount;i++) {\n            const image = images[i];\n            const index = image.index;\n\n            if (image.quatDirty) {\n                image.quaternionArray.splatter(geo_quaternion, index * 16);\n                image.quatDirty = false;\n                quatChanged = true;\n            }\n\n            if (image.positionDirty) {\n                image.spotArray.splatter(geo_spot, index * 12);\n                image.positionDirty = false;\n                positionChanged = true;\n            }\n\n            if (image.verticesDirty) {\n                image.vertices.splatter(geo_pos, index * 12);\n                image.verticesDirty = false;\n                verticesChanged = true;\n            }\n\n            if (image.uvDirty) {\n                image.uv.splatter(geo_uv, index * 8);\n                image.uvDirty = false;\n                uvChanged = true;\n            }\n\n            if (image.texDirty) {\n                geo_tex.fill(image.tex, index * 4, index * 4 + 4);\n                image.texDirty = false;\n                texChanged = true;\n            }\n\n            if (image.lightDirty) {\n                geo_light.fill(image.light, index * 4, index * 4 + 4);\n                image.lightDirty = false;\n                lightChanged = true;\n            }\n\n            if (image.waveDirty) {\n                geo_wave.fill(image.wave, index * 4, index * 4 + 4);\n                image.waveDirty = false;\n                waveChanged = true;\n            }\n        }\n\n        for(let i=0;i<imageCount;i++) {\n            imageOrder[i].indexArray.splatter(geo_index, i * 6);\n        }\n\n        if(geometry.drawRange.start !== 0 || geometry.drawRange.count !== imageCount*planeGeometry.index.count) {\n            geometry.setDrawRange(0, imageCount*planeGeometry.index.count);\n        }\n\n        if(lightChanged) {\n            geometry.attributes.light.needsUpdate = true;\n        }\n        if(waveChanged) {\n            geometry.attributes.wave.needsUpdate = true;\n        }\n        if(quatChanged) {\n            geometry.attributes.quaternion.needsUpdate = true;\n        }\n        if(positionChanged) {\n            geometry.attributes.spot.needsUpdate = true;\n        }\n        if(verticesChanged) {\n            geometry.attributes.position.needsUpdate = true;\n        }\n        if(texChanged) {\n            geometry.attributes.tex.needsUpdate = true;\n        }\n        if(uvChanged) {\n            geometry.attributes.uv.needsUpdate = true;\n        }\n        geometry.index.needsUpdate = true;\n        this.clear();\n    }\n\n    function destroyEverything() {\n        for(let i=0; i<spriteRenderers.length; i++) {\n            spriteRenderers[i].destroy();\n        }\n        spriteRenderers.length = 0;\n    }\n\n    function destroySprite() {\n        if(this.mesh) {\n            this.mesh.geometry.dispose();\n            this.mesh.material.dispose();\n        }\n        this.mesh = null;\n        this.images.length = 0;\n        this.imageCount = 0;\n    }\n\n    /**\n     *  PUBLIC DECLARATIONS\n     */\n    SpriteRenderer.setIndexProcessor = setIndexProcessor;\n    Utils.onDestroy(destroyEverything);\n\n    /**\n     *   PROCESSES\n     */\n\n\n    return SpriteRenderer;\n });\n"]}