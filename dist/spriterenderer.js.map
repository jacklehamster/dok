{"version":3,"sources":["../spriterenderer.js"],"names":["define","THREE","Utils","SpriteObject","SpriteSheet","ObjectPool","Camera","turboSort","Shader","planeGeometry","PlaneBufferGeometry","pointCount","attributes","position","count","indices","index","array","spriteRenderers","uniforms","indexProcessor","SpriteRenderer","images","imageOrder","imageCount","mesh","createMesh","curvature","self","display","spriteObject","image","cut","visible","getCut","img","ready","SpriteImage","j","length","indexArray","quat","hasQuaternionArray","quaternionArray","getCameraQuaternionData","splatter","quatDirty","equals","copy","toArray","spotArray","positionDirty","size","vertices","v","verticesDirty","uv","uvDirty","tex","texDirty","light","lightDirty","push","prototype","destroy","destroySprite","render","updateGraphics","clear","Vector3","Float32Array","Uint16Array","zIndex","recycleAll","spriteRenderer","geometry","BufferGeometry","addAttribute","BufferAttribute","Mesh","MeshBasicMaterial","material","ShaderMaterial","texture","type","value","getTextures","vCam","getCamera","vertexShader","fragmentShader","transparent","depthWrite","depthTest","frustumCulled","sortImages","camera","i","distanceToManhattan","indexFunction","setIndexProcessor","fun","a","previousAttribute","copyArray","setDynamic","spot","quaternion","geo_quaternion","geo_spot","geo_pos","geo_tex","geo_light","geo_uv","geo_index","quatChanged","positionChanged","texChanged","verticesChanged","uvChanged","lightChanged","fill","drawRange","start","setDrawRange","needsUpdate","destroyEverything","dispose","onDestroy"],"mappings":"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","file":"spriterenderer.js","sourcesContent":["define([\n    'threejs',\n    'utils',\n    'spriteobject',\n    'spritesheet',\n    'objectpool',\n    'camera',\n    'turbosort',\n    'shader',\n], function(THREE, Utils, SpriteObject, SpriteSheet, ObjectPool, Camera, turboSort, Shader) {\n    'use strict';\n\n    const planeGeometry = new THREE.PlaneBufferGeometry(1, 1);\n    const pointCount = planeGeometry.attributes.position.count;\n    const indices = planeGeometry.index.array;\n    let spriteRenderers = [];\n    let uniforms = null;\n    let indexProcessor = function(){};\n\n    /**\n     *  CLASS DEFINITIONS\n     */\n\n    function SpriteRenderer() {\n        this.images = [];\n        this.imageOrder = [];\n        this.imageCount = 0;\n        this.mesh = createMesh(this);\n        this.curvature = 0;\n\n        const self = this;\n\n        this.display = function (spriteObject) {\n            let image = null;\n            const cut = spriteObject && spriteObject.visible !== false\n                ? SpriteSheet.getCut(spriteObject.img) : null;\n            if (cut && cut.ready) {\n                const index = self.imageCount;\n                if(!self.images[index]) {\n                    self.images[index] = new SpriteImage();\n                    self.images[index].index = index;\n                }\n\n                image = self.images[index];\n\n                for (let j=0; j<indices.length; j++) {\n                    image.indexArray[j] = indices[j] + image.index*4;\n                }\n\n                const quat = spriteObject.hasQuaternionArray ? spriteObject.quaternionArray : Camera.getCameraQuaternionData().array;\n                if (image.quaternionArray[0] !== quat[0]\n                    || image.quaternionArray[1] !== quat[1]\n                    || image.quaternionArray[2] !== quat[2]\n                    || image.quaternionArray[3] !== quat[3]\n                ) {\n                    quat.splatter(image.quaternionArray,0)\n                        .splatter(image.quaternionArray,4)\n                        .splatter(image.quaternionArray,8)\n                        .splatter(image.quaternionArray,12);\n                    image.quatDirty = true;\n                }\n\n                if (!spriteObject.position.equals(image.position)) {\n                    image.position.copy(spriteObject.position);\n                    image.position.toArray(image.spotArray);\n                    image.position.toArray(image.spotArray, 3);\n                    image.position.toArray(image.spotArray, 6);\n                    image.position.toArray(image.spotArray, 9);\n                    image.positionDirty = true;\n                }\n\n                if (spriteObject.size[0] !== image.size[0]\n                    || spriteObject.size[1] !== image.size[1]\n                    || spriteObject.size[2] !== image.size[2]\n                    || image.positionDirty\n                ) {\n                    image.size[0] = spriteObject.size[0];\n                    image.size[1] = spriteObject.size[1];\n                    image.size[2] = spriteObject.size[2];\n                    const vertices = planeGeometry.attributes.position.array;\n                    for(let v=0; v<vertices.length; v++) {\n                        image.vertices[v] = vertices[v] * spriteObject.size[v%3] + image.spotArray[v];\n                    }\n                    image.verticesDirty = true;\n                }\n\n                if(image.uv !== cut.uv) {\n                    image.uv = cut.uv;\n                    image.uvDirty = true;\n                }\n\n                if(image.tex !== cut.tex) {\n                    image.tex = cut.tex;\n                    image.texDirty = true;\n                }\n\n                if(image.light !== spriteObject.light) {\n                    image.light = spriteObject.light;\n                    image.lightDirty = true;\n                }\n                image.spriteObject = spriteObject;\n                self.imageOrder[index] = image;\n                self.imageCount++;\n            }\n            return image;\n        };\n\n        spriteRenderers.push(this);\n    }\n\n    SpriteRenderer.prototype.destroy = destroySprite;\n    SpriteRenderer.prototype.render = render;\n    SpriteRenderer.prototype.updateGraphics = updateGraphics;\n    SpriteRenderer.prototype.clear = clear;\n\n    function SpriteImage() {\n        this.position = new THREE.Vector3();\n        this.spotArray = new Float32Array(3 * pointCount);\n        this.size = new Float32Array(3);\n        this.vertices = new Float32Array(planeGeometry.attributes.position.array.length);\n        this.quaternionArray = new Float32Array(4 * pointCount);\n        this.indexArray = new Uint16Array(indices.length);\n    }\n    SpriteImage.prototype.index = 0;\n    SpriteImage.prototype.position = null;\n    SpriteImage.prototype.spotArray = null;\n    SpriteImage.prototype.indexArray = null;\n    SpriteImage.prototype.tex = -1;\n    SpriteImage.prototype.size = null;\n    SpriteImage.prototype.uv = null;\n    SpriteImage.prototype.vertices = null;\n    SpriteImage.prototype.light = 1;\n    SpriteImage.prototype.zIndex = 0;\n    SpriteImage.prototype.quaternionArray = null;\n    SpriteImage.prototype.positionDirty = true;\n    SpriteImage.prototype.verticesDirty = true;\n    SpriteImage.prototype.texDirty = true;\n    SpriteImage.prototype.uvDirty = true;\n    SpriteImage.prototype.lightDirty = true;\n    SpriteImage.prototype.quatDirty = true;\n    SpriteImage.prototype.spriteObject = null;\n\n    /**\n     *  FUNCTION DEFINITIONS\n     */\n\n    function clear() {\n        this.imageCount = 0;\n        ObjectPool.recycleAll(SpriteObject);\n    }\n\n    function createMesh(spriteRenderer) {\n        const geometry = new THREE.BufferGeometry();\n        const vertices = new Float32Array( [\n            -1.0, -1.0,  1.0,\n            1.0, -1.0,  1.0,\n            1.0,  1.0,  1.0,\n\n            1.0,  1.0,  1.0,\n            -1.0,  1.0,  1.0,\n            -1.0, -1.0,  1.0\n        ] );\n        geometry.addAttribute( 'position', new THREE.BufferAttribute( vertices, 3 ) );\n        const mesh = new THREE.Mesh(geometry, new THREE.MeshBasicMaterial());\n\n        mesh.material = new THREE.ShaderMaterial( {\n            uniforms: uniforms = {\n                texture:  {\n                    type: 'tv',\n                    get value() { return SpriteSheet.getTextures(); },\n                },\n                vCam : {\n                    type: \"v3\",\n                    get value() { return Camera.getCamera().position; },\n                },\n                curvature: {\n                    type: \"f\",\n                    get value() { return spriteRenderer.curvature || 0; },\n                },\n            },\n            vertexShader: Shader.vertexShader,\n            fragmentShader: Shader.fragmentShader,\n            transparent:true,\n            depthWrite: false,\n            depthTest: true,\n        } );\n\n        mesh.frustumCulled = false;\n        return mesh;\n    }\n\n    function sortImages(images,count) {\n        const camera = Camera.getCamera();\n        for (let i = 0; i < count; i++) {\n            images[i].zIndex = -camera.position.distanceToManhattan(images[i].position);\n        }\n        indexProcessor(images, count);\n        turboSort(images,count,indexFunction);\n    }\n\n    function setIndexProcessor(fun) {\n        indexProcessor = fun ? fun : function(){};\n    }\n\n    function indexFunction(a) {\n        return a.zIndex;\n    }\n\n    function render() {\n        const imageCount = this.imageCount;\n        const pointCount = planeGeometry.attributes.position.count;\n        let previousAttribute;\n\n        const mesh = this.mesh;\n        const geometry = mesh.geometry;\n        if (!geometry.attributes.position || geometry.attributes.position.count < imageCount * pointCount) {\n            previousAttribute = geometry.attributes.position;\n            geometry.attributes.position = new THREE.BufferAttribute(\n                new Float32Array(imageCount * pointCount * 3), 3\n            );\n            if(previousAttribute)\n                geometry.attributes.position.copyArray(previousAttribute.array);\n            geometry.attributes.position.setDynamic(true);\n        }\n        if (!geometry.attributes.spot || geometry.attributes.spot.count < imageCount * pointCount) {\n            previousAttribute = geometry.attributes.spot;\n            geometry.attributes.spot = new THREE.BufferAttribute(\n                new Float32Array(imageCount * pointCount * 3), 3\n            );\n            if(previousAttribute)\n                geometry.attributes.spot.copyArray(previousAttribute.array);\n            geometry.attributes.spot.setDynamic(true);\n        }\n        if (!geometry.attributes.quaternion || geometry.attributes.quaternion.count < imageCount * pointCount) {\n            previousAttribute = geometry.attributes.quaternion;\n            geometry.attributes.quaternion = new THREE.BufferAttribute(\n                new Float32Array(imageCount * pointCount * 4), 4\n            );\n            if(previousAttribute)\n                geometry.attributes.quaternion.copyArray(previousAttribute.array);\n            geometry.attributes.quaternion.setDynamic(true);\n        }\n        if (!geometry.attributes.uv || geometry.attributes.uv.count < imageCount * pointCount) {\n            previousAttribute = geometry.attributes.uv;\n            geometry.attributes.uv = new THREE.BufferAttribute(\n                new Float32Array(imageCount * pointCount * 2), 2\n            );\n            if(previousAttribute)\n                geometry.attributes.uv.copyArray(previousAttribute.array);\n            geometry.attributes.uv.setDynamic(true);\n        }\n        if (!geometry.attributes.tex || geometry.attributes.tex.count < imageCount * pointCount) {\n            previousAttribute = geometry.attributes.tex;\n            geometry.attributes.tex = new THREE.BufferAttribute(\n                new Float32Array(imageCount * pointCount), 1\n            );\n            if(previousAttribute)\n                geometry.attributes.tex.copyArray(previousAttribute.array);\n            geometry.attributes.tex.setDynamic(true);\n        }\n        if (!geometry.attributes.light || geometry.attributes.light.count < imageCount * pointCount) {\n            previousAttribute = geometry.attributes.light;\n            geometry.attributes.light = new THREE.BufferAttribute(\n                new Float32Array(imageCount * pointCount), 1\n            );\n            if(previousAttribute)\n                geometry.attributes.light.copyArray(previousAttribute.array);\n            geometry.attributes.light.setDynamic(true);\n        }\n        if (!geometry.index || geometry.index.count < imageCount * planeGeometry.index.array.length) {\n            previousAttribute = geometry.index;\n            const indices = planeGeometry.index.array;\n            geometry.index = new THREE.BufferAttribute(new Uint16Array(imageCount * indices.length), 1);\n            if(previousAttribute)\n                geometry.index.copyArray(previousAttribute.array);\n            geometry.index.setDynamic(true);\n        }\n\n        sortImages(this.imageOrder, imageCount);\n    }\n\n    function updateGraphics() {\n        this.render();\n\n        const images = this.images;\n        const imageOrder = this.imageOrder;\n        const imageCount = this.imageCount;\n        const geometry = this.mesh.geometry;\n        const geo_quaternion = geometry.attributes.quaternion.array;\n        const geo_spot = geometry.attributes.spot.array;\n        const geo_pos = geometry.attributes.position.array;\n        const geo_tex = geometry.attributes.tex.array;\n        const geo_light = geometry.attributes.light.array;\n        const geo_uv = geometry.attributes.uv.array;\n        const geo_index = geometry.index.array;\n\n        let quatChanged = false;\n        let positionChanged = false;\n        let texChanged = false;\n        let verticesChanged = false;\n        let uvChanged = false;\n        let lightChanged = false;\n\n        for(let i=0;i<imageCount;i++) {\n            const image = images[i];\n            const index = image.index;\n\n            if (image.quatDirty) {\n                image.quaternionArray.splatter(geo_quaternion, index * 16);\n                image.quatDirty = false;\n                quatChanged = true;\n            }\n\n            if (image.positionDirty) {\n                image.spotArray.splatter(geo_spot, index * 12);\n                image.positionDirty = false;\n                positionChanged = true;\n            }\n\n            if (image.verticesDirty) {\n                image.vertices.splatter(geo_pos, index * 12);\n                image.verticesDirty = false;\n                verticesChanged = true;\n            }\n\n            if (image.uvDirty) {\n                image.uv.splatter(geo_uv, index * 8);\n                image.uvDirty = false;\n                uvChanged = true;\n            }\n\n            if (image.texDirty) {\n                geo_tex.fill(image.tex, index * 4, index * 4 + 4);\n                image.texDirty = false;\n                texChanged = true;\n            }\n\n            if (image.lightDirty) {\n                geo_light.fill(image.light, index * 4, index * 4 + 4);\n                image.lightDirty = false;\n                lightChanged = true;\n            }\n        }\n\n        for(let i=0;i<imageCount;i++) {\n            imageOrder[i].indexArray.splatter(geo_index, i * 6);\n        }\n\n        if(geometry.drawRange.start !== 0 || geometry.drawRange.count !== imageCount*planeGeometry.index.count) {\n            geometry.setDrawRange(0, imageCount*planeGeometry.index.count);\n        }\n\n        if(lightChanged) {\n            geometry.attributes.light.needsUpdate = true;\n        }\n        if(quatChanged) {\n            geometry.attributes.quaternion.needsUpdate = true;\n        }\n        if(positionChanged) {\n            geometry.attributes.spot.needsUpdate = true;\n        }\n        if(verticesChanged) {\n            geometry.attributes.position.needsUpdate = true;\n        }\n        if(texChanged) {\n            geometry.attributes.tex.needsUpdate = true;\n        }\n        if(uvChanged) {\n            geometry.attributes.uv.needsUpdate = true;\n        }\n        geometry.index.needsUpdate = true;\n        this.clear();\n    }\n\n    function destroyEverything() {\n        for(let i=0; i<spriteRenderers.length; i++) {\n            spriteRenderers[i].destroy();\n        }\n        spriteRenderers.length = 0;\n    }\n\n    function destroySprite() {\n        if(this.mesh) {\n            this.mesh.geometry.dispose();\n            this.mesh.material.dispose();\n        }\n        this.mesh = null;\n        this.images.length = 0;\n        this.imageCount = 0;\n    }\n\n    /**\n     *  PUBLIC DECLARATIONS\n     */\n    SpriteRenderer.setIndexProcessor = setIndexProcessor;\n    Utils.onDestroy(destroyEverything);\n\n    /**\n     *   PROCESSES\n     */\n\n\n    return SpriteRenderer;\n });\n"]}