{"version":3,"sources":["../spriterenderer.js"],"names":["define","THREE","Utils","SpriteObject","SpriteSheet","ObjectPool","Camera","turboSort","planeGeometry","PlaneBufferGeometry","pointCount","attributes","position","count","indices","index","array","spriteRenderers","uniforms","indexProcessor","SpriteRenderer","images","imageOrder","imageCount","mesh","createMesh","self","display","spriteObject","image","cut","visible","getCut","img","ready","SpriteImage","j","length","indexArray","quat","hasQuaternionArray","quaternionArray","getCameraQuaternionData","set","quatDirty","equals","copy","toArray","spotArray","positionDirty","size","vertices","v","verticesDirty","uv","uvDirty","tex","texDirty","light","lightDirty","push","prototype","destroy","destroySprite","render","updateGraphics","clear","Vector3","Float32Array","Uint16Array","zIndex","recycleAll","geometry","BufferGeometry","addAttribute","BufferAttribute","Mesh","MeshBasicMaterial","loadAsync","require","toUrl","vertexShader","fragmentShader","vertexShaderCommon","material","ShaderMaterial","texture","type","value","getTextures","vCam","getCamera","transparent","depthWrite","depthTest","frustumCulled","sortImages","camera","i","distanceToManhattan","indexFunction","setIndexProcessor","fun","a","previousAttribute","copyArray","setDynamic","spot","quaternion","geo_quaternion","geo_spot","geo_pos","geo_tex","geo_light","geo_uv","geo_index","quatChanged","positionChanged","texChanged","verticesChanged","uvChanged","lightChanged","fill","drawRange","start","setDrawRange","needsUpdate","destroyEverything","dispose","onDestroy"],"mappings":"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","file":"spriterenderer.js","sourcesContent":["define([\n    'threejs',\n    'utils',\n    'spriteobject',\n    'spritesheet',\n    'objectpool',\n    'camera',\n    'turbosort'\n], function(THREE, Utils, SpriteObject, SpriteSheet, ObjectPool, Camera, turboSort) {\n    'use strict';\n\n    var planeGeometry = new THREE.PlaneBufferGeometry(1, 1);\n    var pointCount = planeGeometry.attributes.position.count;\n    var indices = planeGeometry.index.array;\n    var spriteRenderers = [];\n    var uniforms = null;\n    var indexProcessor = function(){};\n\n    /**\n     *  CLASS DEFINITIONS\n     */\n\n    function SpriteRenderer() {\n        this.images = [];\n        this.imageOrder = [];\n        this.imageCount = 0;\n        this.mesh = createMesh();\n\n        var self = this;\n\n        this.display = function (spriteObject) {\n            var image = null;\n            var cut = spriteObject && spriteObject.visible !== false\n                ? SpriteSheet.getCut(spriteObject.img) : null;\n            if (cut && cut.ready) {\n                var index = self.imageCount;\n                if(!self.images[index]) {\n                    self.images[index] = new SpriteImage();\n                    self.images[index].index = index;\n                }\n\n                image = self.images[index];\n\n                for (var j=0; j<indices.length; j++) {\n                    image.indexArray[j] = indices[j] + image.index*4;\n                }\n\n                var quat = spriteObject.hasQuaternionArray ? spriteObject.quaternionArray : Camera.getCameraQuaternionData().array;\n                if (image.quaternionArray[0] !== quat[0]\n                    || image.quaternionArray[1] !== quat[1]\n                    || image.quaternionArray[2] !== quat[2]\n                    || image.quaternionArray[3] !== quat[3]\n                ) {\n                    image.quaternionArray.set(quat);\n                    image.quaternionArray.set(quat,4);\n                    image.quaternionArray.set(quat,8);\n                    image.quaternionArray.set(quat,12);\n                    image.quatDirty = true;\n                }\n\n                if (!spriteObject.position.equals(image.position)) {\n                    image.position.copy(spriteObject.position);\n                    image.position.toArray(image.spotArray);\n                    image.position.toArray(image.spotArray, 3);\n                    image.position.toArray(image.spotArray, 6);\n                    image.position.toArray(image.spotArray, 9);\n                    image.positionDirty = true;\n                }\n\n                if (spriteObject.size[0] !== image.size[0]\n                    || spriteObject.size[1] !== image.size[1]\n                    || spriteObject.size[2] !== image.size[2]\n                    || image.positionDirty\n                ) {\n                    image.size[0] = spriteObject.size[0];\n                    image.size[1] = spriteObject.size[1];\n                    image.size[2] = spriteObject.size[2];\n                    var vertices = planeGeometry.attributes.position.array;\n                    for(var v=0; v<vertices.length; v++) {\n                        image.vertices[v]\n                            = vertices[v] * spriteObject.size[v%3] + image.spotArray[v];\n                    }\n                    image.verticesDirty = true;\n                }\n\n                if(image.uv !== cut.uv) {\n                    image.uv = cut.uv;\n                    image.uvDirty = true;\n                }\n\n                if(image.tex !== cut.tex) {\n                    image.tex = cut.tex;\n                    image.texDirty = true;\n                }\n\n                if(image.light !== spriteObject.light) {\n                    image.light = spriteObject.light;\n                    image.lightDirty = true;\n                }\n                image.spriteObject = spriteObject;\n                self.imageOrder[index] = image;\n                self.imageCount++;\n            }\n            return image;\n        };\n\n        spriteRenderers.push(this);\n    }\n\n    SpriteRenderer.prototype.destroy = destroySprite;\n    SpriteRenderer.prototype.render = render;\n    SpriteRenderer.prototype.updateGraphics = updateGraphics;\n    SpriteRenderer.prototype.clear = clear;\n\n    function SpriteImage() {\n        this.position = new THREE.Vector3();\n        this.spotArray = new Float32Array(3 * pointCount);\n        this.size = new Float32Array(3);\n        this.vertices = new Float32Array(planeGeometry.attributes.position.array.length);\n        this.quaternionArray = new Float32Array(4 * pointCount);\n        this.indexArray = new Uint16Array(indices.length);\n    }\n    SpriteImage.prototype.index = 0;\n    SpriteImage.prototype.position = null;\n    SpriteImage.prototype.spotArray = null;\n    SpriteImage.prototype.indexArray = null;\n    SpriteImage.prototype.tex = -1;\n    SpriteImage.prototype.size = null;\n    SpriteImage.prototype.uv = null;\n    SpriteImage.prototype.vertices = null;\n    SpriteImage.prototype.light = 1;\n    SpriteImage.prototype.zIndex = 0;\n    SpriteImage.prototype.quaternionArray = null;\n    SpriteImage.prototype.positionDirty = true;\n    SpriteImage.prototype.verticesDirty = true;\n    SpriteImage.prototype.texDirty = true;\n    SpriteImage.prototype.uvDirty = true;\n    SpriteImage.prototype.lightDirty = true;\n    SpriteImage.prototype.quatDirty = true;\n    SpriteImage.prototype.spriteObject = null;\n\n    /**\n     *  FUNCTION DEFINITIONS\n     */\n\n    function clear() {\n        this.imageCount = 0;\n        ObjectPool.recycleAll(SpriteObject);\n    }\n\n    function createMesh() {\n        var geometry = new THREE.BufferGeometry();\n        var vertices = new Float32Array( [\n            -1.0, -1.0,  1.0,\n            1.0, -1.0,  1.0,\n            1.0,  1.0,  1.0,\n\n            1.0,  1.0,  1.0,\n            -1.0,  1.0,  1.0,\n            -1.0, -1.0,  1.0\n        ] );\n        geometry.addAttribute( 'position', new THREE.BufferAttribute( vertices, 3 ) );\n        var mesh = new THREE.Mesh(geometry, new THREE.MeshBasicMaterial());\n\n        Utils.loadAsync(\n            [\n                require.toUrl(\"glsl/vertex-shader.glsl\"),\n                require.toUrl(\"glsl/fragment-shader.glsl\"),\n                require.toUrl(\"glsl/vertex-shader-common.glsl\"),\n            ],\n            function(vertexShader, fragmentShader, vertexShaderCommon) {\n                mesh.material = new THREE.ShaderMaterial( {\n                    uniforms: uniforms = {\n                        texture:  {\n                            type: 'tv',\n                            get value() { return SpriteSheet.getTextures(); }\n                        },\n                        vCam : {\n                            type: \"v3\",\n                            get value() { return Camera.getCamera().position; }\n                        },\n                    },\n                    vertexShader: vertexShaderCommon + vertexShader,\n                    fragmentShader: fragmentShader,\n                    transparent:true,\n                    depthWrite: false,\n                    depthTest: true,\n                } );\n            }\n        );\n\n        mesh.frustumCulled = false;\n        return mesh;\n    }\n\n    function sortImages(images,count) {\n        var camera = Camera.getCamera();\n        for (var i = 0; i < count; i++) {\n            images[i].zIndex = -camera.position.distanceToManhattan(images[i].position);\n        }\n        indexProcessor(images, count);\n        turboSort(images,count,indexFunction);\n    }\n\n    function setIndexProcessor(fun) {\n        indexProcessor = fun ? fun : function(){};\n    }\n\n    function indexFunction(a) {\n        return a.zIndex;\n    }\n\n    function render() {\n        var imageCount = this.imageCount;\n        var pointCount = planeGeometry.attributes.position.count;\n        var previousAttribute;\n\n        var mesh = this.mesh;\n        var geometry = mesh.geometry;\n        if (!geometry.attributes.position || geometry.attributes.position.count < imageCount * pointCount) {\n            previousAttribute = geometry.attributes.position;\n            geometry.attributes.position = new THREE.BufferAttribute(\n                new Float32Array(imageCount * pointCount * 3), 3\n            );\n            if(previousAttribute)\n                geometry.attributes.position.copyArray(previousAttribute.array);\n            geometry.attributes.position.setDynamic(true);\n        }\n        if (!geometry.attributes.spot || geometry.attributes.spot.count < imageCount * pointCount) {\n            previousAttribute = geometry.attributes.spot;\n            geometry.attributes.spot = new THREE.BufferAttribute(\n                new Float32Array(imageCount * pointCount * 3), 3\n            );\n            if(previousAttribute)\n                geometry.attributes.spot.copyArray(previousAttribute.array);\n            geometry.attributes.spot.setDynamic(true);\n        }\n        if (!geometry.attributes.quaternion || geometry.attributes.quaternion.count < imageCount * pointCount) {\n            previousAttribute = geometry.attributes.quaternion;\n            geometry.attributes.quaternion = new THREE.BufferAttribute(\n                new Float32Array(imageCount * pointCount * 4), 4\n            );\n            if(previousAttribute)\n                geometry.attributes.quaternion.copyArray(previousAttribute.array);\n            geometry.attributes.quaternion.setDynamic(true);\n        }\n        if (!geometry.attributes.uv || geometry.attributes.uv.count < imageCount * pointCount) {\n            previousAttribute = geometry.attributes.uv;\n            geometry.attributes.uv = new THREE.BufferAttribute(\n                new Float32Array(imageCount * pointCount * 2), 2\n            );\n            if(previousAttribute)\n                geometry.attributes.uv.copyArray(previousAttribute.array);\n            geometry.attributes.uv.setDynamic(true);\n        }\n        if (!geometry.attributes.tex || geometry.attributes.tex.count < imageCount * pointCount) {\n            previousAttribute = geometry.attributes.tex;\n            geometry.attributes.tex = new THREE.BufferAttribute(\n                new Float32Array(imageCount * pointCount), 1\n            );\n            if(previousAttribute)\n                geometry.attributes.tex.copyArray(previousAttribute.array);\n            geometry.attributes.tex.setDynamic(true);\n        }\n        if (!geometry.attributes.light || geometry.attributes.light.count < imageCount * pointCount) {\n            previousAttribute = geometry.attributes.light;\n            geometry.attributes.light = new THREE.BufferAttribute(\n                new Float32Array(imageCount * pointCount), 1\n            );\n            if(previousAttribute)\n                geometry.attributes.light.copyArray(previousAttribute.array);\n            geometry.attributes.light.setDynamic(true);\n        }\n        if (!geometry.index || geometry.index.count < imageCount * planeGeometry.index.array.length) {\n            previousAttribute = geometry.index;\n            var indices = planeGeometry.index.array;\n            geometry.index = new THREE.BufferAttribute(new Uint16Array(imageCount * indices.length), 1);\n            if(previousAttribute)\n                geometry.index.copyArray(previousAttribute.array);\n            geometry.index.setDynamic(true);\n        }\n\n        sortImages(this.imageOrder, imageCount);\n    }\n\n    function updateGraphics() {\n        this.render();\n\n        var images = this.images;\n        var imageOrder = this.imageOrder;\n        var imageCount = this.imageCount;\n        var geometry = this.mesh.geometry;\n        var geo_quaternion = geometry.attributes.quaternion.array;\n        var geo_spot = geometry.attributes.spot.array;\n        var geo_pos = geometry.attributes.position.array;\n        var geo_tex = geometry.attributes.tex.array;\n        var geo_light = geometry.attributes.light.array;\n        var geo_uv = geometry.attributes.uv.array;\n        var geo_index = geometry.index.array;\n\n        var quatChanged = false;\n        var positionChanged = false;\n        var texChanged = false;\n        var verticesChanged = false;\n        var uvChanged = false;\n        var lightChanged = false;\n\n        for(var i=0;i<imageCount;i++) {\n            var image = images[i];\n            var index = image.index;\n\n            if (image.quatDirty) {\n                var quaternionArray = image.quaternionArray;\n                geo_quaternion.set(quaternionArray, index * 16);\n                image.quatDirty = false;\n                quatChanged = true;\n            }\n\n            if (image.positionDirty) {\n                geo_spot.set(image.spotArray, index * 12);\n                image.positionDirty = false;\n                positionChanged = true;\n            }\n\n            if (image.verticesDirty) {\n                geo_pos.set(image.vertices, index * 12);\n                image.verticesDirty = false;\n                verticesChanged = true;\n            }\n\n            if (image.uvDirty) {\n                geo_uv.set(image.uv, index * 8);\n                image.uvDirty = false;\n                uvChanged = true;\n            }\n\n            if (image.texDirty) {\n                geo_tex.fill(image.tex, index * 4, index * 4 + 4);\n                image.texDirty = false;\n                texChanged = true;\n            }\n\n            if (image.lightDirty) {\n                geo_light.fill(image.light, index * 4, index * 4 + 4);\n                image.lightDirty = false;\n                lightChanged = true;\n            }\n        }\n\n        for(i=0;i<imageCount;i++) {\n            geo_index.set(imageOrder[i].indexArray, i * 6);\n        }\n\n        if(geometry.drawRange.start !== 0 || geometry.drawRange.count !== imageCount*planeGeometry.index.count) {\n            geometry.setDrawRange(0, imageCount*planeGeometry.index.count);\n        }\n\n        if(lightChanged) {\n            geometry.attributes.light.needsUpdate = true;\n        }\n        if(quatChanged) {\n            geometry.attributes.quaternion.needsUpdate = true;\n        }\n        if(positionChanged) {\n            geometry.attributes.spot.needsUpdate = true;\n        }\n        if(verticesChanged) {\n            geometry.attributes.position.needsUpdate = true;\n        }\n        if(texChanged) {\n            geometry.attributes.tex.needsUpdate = true;\n        }\n        if(uvChanged) {\n            geometry.attributes.uv.needsUpdate = true;\n        }\n        geometry.index.needsUpdate = true;\n        this.clear();\n    }\n\n    function destroyEverything() {\n        for(var i=0; i<spriteRenderers.length; i++) {\n            spriteRenderers[i].destroy();\n        }\n        spriteRenderers.length = 0;\n    }\n\n    function destroySprite() {\n        if(this.mesh) {\n            this.mesh.geometry.dispose();\n            this.mesh.material.dispose();\n        }\n        this.mesh = null;\n        this.images.length = 0;\n        this.imageCount = 0;\n    }\n\n    /**\n     *  PUBLIC DECLARATIONS\n     */\n    SpriteRenderer.setIndexProcessor = setIndexProcessor;\n    Utils.onDestroy(destroyEverything);\n\n    /**\n     *   PROCESSES\n     */\n\n\n    return SpriteRenderer;\n });\n"]}