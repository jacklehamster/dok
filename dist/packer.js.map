{"version":3,"sources":["../packer.js"],"names":["define","Utils","MAX_TEXTURES","SPRITE_SHEET_SIZE","CHUNKSIZES","chunks","doesFit","tex","x","y","width","height","xi","yi","findSlot","canvas","chunkWidth","Math","ceil","chunkHeight","fillSlot","getSlot","slot","destroyEverything","length","Packer","onDestroy"],"mappings":"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","file":"packer.js","sourcesContent":["define([\n    'utils',\n], function(Utils) {\n\n     'use strict';\n    \n    const MAX_TEXTURES = 16;\n    const SPRITE_SHEET_SIZE = 2048;\n    const CHUNKSIZES = 8;\n\n    const chunks = [];\n\n    /**\n     *  FUNCTION DEFINITIONS\n     */   \n     \n    function doesFit(tex,x,y,width,height) {\n        if(x+width>SPRITE_SHEET_SIZE || y+height>SPRITE_SHEET_SIZE) return false;\n    \n        if(chunks[tex]) {\n            for(let xi=0;xi<width;xi++) {\n                if(chunks[tex][x+xi]) {\n                    for(let yi=0;yi<height;yi++) {\n                        if(chunks[tex][x+xi][y+yi]) {\n                            return false;\n                        }\n                    }                \n                }\n            }\n        }\n        \n        return true;\n    }    \n     \n    function findSlot(canvas) {\n        if(canvas.width <= 1 && canvas.height <= 1) {\n            return null;\n        }\n        if(canvas.width>SPRITE_SHEET_SIZE||canvas.height>SPRITE_SHEET_SIZE) {\n            return null;\n        }\n        const chunkWidth = Math.ceil(canvas.width/CHUNKSIZES);\n        const chunkHeight = Math.ceil(canvas.height/CHUNKSIZES);\n    \n        for(let tex=0;tex<MAX_TEXTURES;tex++) {\n            for(let x=0;x<SPRITE_SHEET_SIZE/CHUNKSIZES-chunkWidth;x++) {\n                for(let y=0;y<SPRITE_SHEET_SIZE/CHUNKSIZES-chunkHeight;y++) {\n                    if(doesFit(tex,x,y,chunkWidth,chunkHeight)) {\n                        return {tex:tex,x:x*CHUNKSIZES,y:y*CHUNKSIZES};\n                    }\n                }                \n            }\n        }    \n        return null;\n    }\n    \n    function fillSlot(tex,x,y,canvas) {\n        if(!chunks[tex]) chunks[tex] = [];\n        const chunkWidth = Math.ceil((canvas.width+1)/CHUNKSIZES);\n        const chunkHeight = Math.ceil((canvas.height+1)/CHUNKSIZES);\n    \n        for(let xi=0;xi<chunkWidth;xi++) {\n            if(!chunks[tex][x/CHUNKSIZES+xi]) chunks[tex][x/CHUNKSIZES+xi] = [];\n            for(let yi=0;yi<chunkHeight;yi++) {\n                chunks[tex][x/CHUNKSIZES+xi][y/CHUNKSIZES+yi] = canvas;\n            }                \n        }\n    }    \n    \n    function getSlot(canvas) {\n        const slot = findSlot(canvas);\n        if(slot) {\n            fillSlot(slot.tex,slot.x,slot.y,canvas);\n        }\n        return slot;\n    }\n     \n    function destroyEverything() {\n        chunks.length = 0;\n    }\n   \n    /**\n     *  PUBLIC DECLARATIONS\n     */\n    function Packer() {\n    }\n\n    Packer.getSlot = getSlot;\n\n    Utils.onDestroy(destroyEverything);\n\n    /**\n     *   PROCESSES\n     */\n\n    return Packer;\n });\n"]}