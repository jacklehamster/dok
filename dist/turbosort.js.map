{"version":3,"sources":["../turbosort.js"],"names":["define","buckets","counts","SIZE","indexFunction","initArray","size","Uint32Array","getMinMax","array","offset","length","firstIndex","minNum","maxNum","previousNum","inOrder","i","index","result","min","max","identity","a","turboSort","func","Math","turboSortHelper","quickSort","quickSortHelper","compareIndex","b","arrayInfo","range","fill","floor","voyager","bucketId","newSpot","swap","temp","arr","left","right","compare","len","pivot","partitionIndex","partition","pivotValue"],"mappings":"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","file":"turbosort.js","sourcesContent":["define(function() {\n\n    var buckets;\n    var counts;\n    var SIZE = 1000;\n    var indexFunction;\n\n    /**\n     *  FUNCTION DEFINITIONS\n     */\n    function initArray(size) {\n        if(!buckets) {\n            buckets = new Uint32Array(size+1);\n            counts = new Uint32Array(size+1);\n        }\n    }\n\n    function getMinMax(array, offset, length) {\n        var firstIndex = indexFunction(array[offset]);\n        var minNum = firstIndex;\n        var maxNum = firstIndex;\n        var previousNum = firstIndex;\n        var inOrder = true;\n        for(var i=1; i<length; i++) {\n            var index = indexFunction(array[offset+i]);\n            if(previousNum > index) {\n                inOrder = false;\n                if(index < minNum) {\n                    minNum = index;\n                }\n            } else {\n                if(index > maxNum) {\n                    maxNum = index;\n                }\n            }\n            previousNum = index;\n        }\n        getMinMax.result.min = minNum;\n        getMinMax.result.max = maxNum;\n        getMinMax.result.inOrder = inOrder;\n        return getMinMax.result;\n    }\n    getMinMax.result = {\n        min: 0,\n        max: 0,\n        inOrder: false,\n    };\n\n    function identity(a) {\n        return a;\n    }\n\n    function turboSort(array, size, func) {\n        if(array) {\n            size = size ? Math.min(size,array.length) : array.length;\n            if(size > 1) {\n                indexFunction = func ? func : identity;\n                turboSortHelper(array, 0, size ? size : array.length);\n            }\n        }\n    }\n\n    function quickSort(array, size) {\n        quickSortHelper(array, 0, size ? size-1 : array.length-1, compareIndex);\n    }\n\n    function compareIndex(a,b) {\n        return indexFunction(a)-indexFunction(b);\n    }\n\n    function turboSortHelper(array, offset, length) {\n        if(length < 500) {\n            quickSortHelper(array, offset, offset+length-1, compareIndex);\n            return;\n        }\n        var arrayInfo = getMinMax(array, offset, length);\n        if(arrayInfo.inOrder) {\n            return;\n        }\n        var min = arrayInfo.min;\n        var max = arrayInfo.max;\n        var range = max-min;\n        if(range===0) {\n            return;\n        }\n\n        var i, index;\n        counts.fill(0);\n        counts[SIZE] = 1;\n        for(i=0; i<length; i++) {\n            index = Math.floor((SIZE-1) * (indexFunction(array[i+offset]) - min)/range);\n            counts[index]++;\n        }\n\n        buckets.fill(0);\n        buckets[SIZE] = length;\n        buckets[0] = offset;\n        for(i=1; i<SIZE; i++) {\n            buckets[i] = buckets[i-1] + counts[i-1];\n        }\n\n        var voyager = offset, bucketId = 0;\n        while(bucketId<SIZE) {\n            index = Math.floor((SIZE-1) * (indexFunction(array[voyager]) - min)/range);\n            var newSpot = buckets[index] + --counts[index];\n            swap(array,voyager,newSpot);\n            while(!counts[bucketId]) {\n                bucketId++;\n            }\n            voyager = buckets[bucketId];\n        }\n        for(i=0; i<SIZE; i++) {\n            counts[i] = buckets[i + 1] - buckets[i];\n        }\n        for(i=0; i<SIZE; i++) {\n            if(counts[i] > 1) {\n                turboSortHelper(array, buckets[i], counts[i]);\n            }\n        }\n    }\n\n    function swap(array, a, b) {\n        if(a !== b) {\n            var temp = array[a];\n            array[a] = array[b];\n            array[b] = temp;\n        }\n    }\n\n    function quickSortHelper(arr, left, right, compare){\n        var len = arr.length,\n            pivot,\n            partitionIndex;\n\n\n        if(left < right){\n            pivot = right;\n            partitionIndex = partition(arr, pivot, left, right, compare);\n\n            //sort left and right\n            quickSortHelper(arr, left, partitionIndex - 1, compare);\n            quickSortHelper(arr, partitionIndex + 1, right, compare);\n        }\n        return arr;\n    }\n\n    function partition(arr, pivot, left, right, compare){\n        var pivotValue = arr[pivot],\n            partitionIndex = left;\n\n        for(var i = left; i < right; i++){\n            if(compare(arr[i] , pivotValue)<0){\n                swap(arr, i, partitionIndex);\n                partitionIndex++;\n            }\n        }\n        swap(arr, right, partitionIndex);\n        return partitionIndex;\n    }\n\n    /**\n     *   PROCESSES\n     */\n    initArray(SIZE);\n\n    return turboSort;\n});\n"]}